{"version":3,"sources":["play.jpg","seascape.jpg","scoring.jpg","wait1.jpg","question.jpg","answer.jpg","wait2.jpg","team.jpg","iubh.png","login.jpg","kb.jpg","edit.jpg","delete.jpg","components/__generated__/NavQuery.graphql.ts","lib/__generated__/quizNextPhaseMutation.graphql.ts","lib/__generated__/quizPostQuestionMutation.graphql.ts","lib/__generated__/quizUpdateQuestionMutation.graphql.ts","lib/__generated__/quizRemoveQuestionMutation.graphql.ts","lib/__generated__/quizPostAnswerMutation.graphql.ts","lib/__generated__/quizScoreAnswerMutation.graphql.ts","lib/__generated__/quizCreateTeamMutation.graphql.ts","lib/__generated__/quizAddMemberMutation.graphql.ts","lib/__generated__/quizRemoveMemberMutation.graphql.ts","lib/__generated__/quizSetModeMutation.graphql.ts","lib/__generated__/quizTopicsQuery.graphql.ts","lib/__generated__/quizUsersQuery.graphql.ts","components/__generated__/UserBadge_user.graphql.ts","pages/__generated__/TeamsPageQuery.graphql.ts","components/__generated__/QuizRendererSubscription.graphql.ts","components/__generated__/QuizRenderer_team.graphql.ts","pages/__generated__/PlayPageQuery.graphql.ts","pages/__generated__/LoginPageMutation.graphql.ts","pages/__generated__/KBPageQuery.graphql.ts","pages/__generated__/KBBrowsePageTopicQuery.graphql.ts","pages/__generated__/KBBrowsePageQuery.graphql.ts","pages/__generated__/QuestionEditPageQuery.graphql.ts","lib/relayEnv.ts","components/Nav.tsx","lib/auth.ts","CutImage.jsx","lib/quiz.ts","components/UserBadge.jsx","pages/TeamsPage.tsx","components/UserSelect.tsx","components/OpenPhase.tsx","components/QuestionCard.tsx","components/ScoringPhase.tsx","components/WaitScreen.tsx","components/QuestionPhase.tsx","components/AnswerPhase.tsx","components/QuizRenderer.tsx","pages/PlayPage.tsx","pages/HomePage.tsx","pages/LoginPage.jsx","pages/KBPage.tsx","pages/KBBrowsePage.tsx","pages/QuestionEditPage.tsx","pages/QuestionDeletePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","node","v0","v1","hash","v2","v3","v4","v5","v6","v7","v8","API_URL","process","operation","variables","a","fetch","method","headers","localStorage","getItem","body","JSON","stringify","query","text","response","json","result","environment","Environment","network","Network","create","config","subscriptionClient","SubscriptionClient","reconnect","Observable","sink","unsubscribe","request","subscribe","next","data","closed","store","Store","RecordSource","Appbar","auth","setAuth","history","useHistory","render","props","retry","error","className","Navbar","bg","expand","variant","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","exact","Link","me","Text","firstName","lastName","onClick","e","removeItem","push","CutImage","Image","this","src","Col","md","style","opacity","backgroundSize","backgroundImage","React","Component","nextPhase","teamID","commitMutation","mutation","scoreAnswer","answerID","score","removeMember","teamId","username","onCompleted","setMode","mode","getTopics","fetchQuery","topics","edges","map","edge","value","label","code","name","getUsers","users","createFragmentContainer","user","size","round","teamSchema","Yup","shape","required","topic","PlayPage","window","setTimeout","Row","noGutters","teams","Card","key","Body","Title","creator","validationSchema","initialValues","onSubmit","values","actions","topicId","setSubmitting","createTeam","team","errors","isSubmitting","setFieldValue","Form","Group","Label","Control","as","Field","placeholder","cacheOptions","loadOptions","noOptionsMessage","v","onChange","Button","type","disabled","PlayImage","noOptions","inputValue","length","OpenPhase","state","isMe","membershipSet","UserSelect","ButtonGroup","SeascapeImg","QuestionCard","question","number","total","showAnswer","modelAnswer","Footer","author","ScoringPhase","scoreClassMap","isModerator","currentQuestion","questionNumber","questionCount","answerSet","answer","filter","ScoringImg","WaitScreen","phase","title","message","image","QuestionPhase","userDone","WaitImg","Alert","handleSubmit","readOnly","component","rows","QuestionImage","answerSchema","AnswerPhase","AnswerImg","useEffect","requestSubscription","subscription","onNext","teamUpdated","dispose","xl","lg","xs","width","Badge","pill","right","partial","wrong","useParams","HomePage","TeamImage","fluid","height","frameBorder","allow","allowFullScreen","IubhLogo","LoginPage","email","rememberMe","handleChange","bind","event","preventDefault","setState","password","onError","console","log","tokenAuth","setItem","token","loginRedirect","target","newState","usernameInput","focus","idx","ref","input","LoginImg","KBPage","action","InputGroup","Append","KBImage","KBBrowsePage","location","useLocation","topicID","params","qs","parse","search","slice","q","own","useState","setTopic","fetchTopic","querystring","isClearable","questions","pathname","QuestionEditPage","questionID","backTo","updateQuestion","EditImage","QuestionDeletePage","configs","deletedIDFieldName","removeQuestion","DeleteImage","App","path","TeamsPage","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d64e5a02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.b3e38b7e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/seascape.7dcb1943.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scoring.5821ed37.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wait1.6d414af4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/question.6c4dd8df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/answer.ad14f417.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wait2.833fd2d4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/team.ee4f8d13.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iubh.46d4f940.png\";","module.exports = __webpack_public_path__ + \"static/media/login.faf2bcfc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kb.d50fabee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/edit.f7026e52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/delete.71059c26.jpg\";","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type NavQueryVariables = {};\nexport type NavQueryResponse = {\n    readonly me: {\n        readonly firstName: string;\n        readonly lastName: string;\n    } | null;\n};\nexport type NavQuery = {\n    readonly response: NavQueryResponse;\n    readonly variables: NavQueryVariables;\n};\n\n\n\n/*\nquery NavQuery {\n  me {\n    firstName\n    lastName\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"firstName\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lastName\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"NavQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"UserNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"me\",\n        \"plural\": false,\n        \"selections\": [\n          (v0/*: any*/),\n          (v1/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"NavQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"UserNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"me\",\n        \"plural\": false,\n        \"selections\": [\n          (v0/*: any*/),\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"NavQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query NavQuery {\\n  me {\\n    firstName\\n    lastName\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '3ea1ac3537745e0337b48dcd868d4d6d';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizNextPhaseMutationVariables = {\n    teamID: string;\n};\nexport type quizNextPhaseMutationResponse = {\n    readonly nextPhase: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizNextPhaseMutation = {\n    readonly response: quizNextPhaseMutationResponse;\n    readonly variables: quizNextPhaseMutationVariables;\n};\n\n\n\n/*\nmutation quizNextPhaseMutation(\n  $teamID: ID!\n) {\n  nextPhase(input: {id: $teamID}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamID\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"teamID\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"NextPhaseMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"nextPhase\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizNextPhaseMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizNextPhaseMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizNextPhaseMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizNextPhaseMutation(\\n  $teamID: ID!\\n) {\\n  nextPhase(input: {id: $teamID}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '5eb36350b52d701888229d11dd8442eb';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizPostQuestionMutationVariables = {\n    teamID: string;\n    question: string;\n    modelAnswer: string;\n};\nexport type quizPostQuestionMutationResponse = {\n    readonly postQuestion: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizPostQuestionMutation = {\n    readonly response: quizPostQuestionMutationResponse;\n    readonly variables: quizPostQuestionMutationVariables;\n};\n\n\n\n/*\nmutation quizPostQuestionMutation(\n  $teamID: ID!\n  $question: String!\n  $modelAnswer: String!\n) {\n  postQuestion(input: {id: $teamID, question: $question, modelAnswer: $modelAnswer}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamID\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"question\",\n    \"type\": \"String!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"modelAnswer\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"teamID\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"modelAnswer\",\n            \"variableName\": \"modelAnswer\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"question\",\n            \"variableName\": \"question\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"PostQuestionMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"postQuestion\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizPostQuestionMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizPostQuestionMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizPostQuestionMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizPostQuestionMutation(\\n  $teamID: ID!\\n  $question: String!\\n  $modelAnswer: String!\\n) {\\n  postQuestion(input: {id: $teamID, question: $question, modelAnswer: $modelAnswer}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'c56a7ede94c12305af3fb240b8fa2494';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizUpdateQuestionMutationVariables = {\n    questionID: string;\n    question: string;\n    modelAnswer: string;\n};\nexport type quizUpdateQuestionMutationResponse = {\n    readonly updateQuestion: {\n        readonly question: {\n            readonly id: string;\n            readonly question: string;\n            readonly modelAnswer: string;\n        } | null;\n    } | null;\n};\nexport type quizUpdateQuestionMutation = {\n    readonly response: quizUpdateQuestionMutationResponse;\n    readonly variables: quizUpdateQuestionMutationVariables;\n};\n\n\n\n/*\nmutation quizUpdateQuestionMutation(\n  $questionID: ID!\n  $question: String!\n  $modelAnswer: String!\n) {\n  updateQuestion(input: {id: $questionID, question: $question, modelAnswer: $modelAnswer}) {\n    question {\n      id\n      question\n      modelAnswer\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"questionID\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"question\",\n    \"type\": \"String!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"modelAnswer\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"questionID\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"modelAnswer\",\n            \"variableName\": \"modelAnswer\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"question\",\n            \"variableName\": \"question\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"UpdateQuestionMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"updateQuestion\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"QuestionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"question\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"question\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"modelAnswer\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizUpdateQuestionMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizUpdateQuestionMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizUpdateQuestionMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizUpdateQuestionMutation(\\n  $questionID: ID!\\n  $question: String!\\n  $modelAnswer: String!\\n) {\\n  updateQuestion(input: {id: $questionID, question: $question, modelAnswer: $modelAnswer}) {\\n    question {\\n      id\\n      question\\n      modelAnswer\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'f7a65dbce2483f45b4b4f54794d065ab';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizRemoveQuestionMutationVariables = {\n    questionID: string;\n};\nexport type quizRemoveQuestionMutationResponse = {\n    readonly removeQuestion: {\n        readonly question: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizRemoveQuestionMutation = {\n    readonly response: quizRemoveQuestionMutationResponse;\n    readonly variables: quizRemoveQuestionMutationVariables;\n};\n\n\n\n/*\nmutation quizRemoveQuestionMutation(\n  $questionID: ID!\n) {\n  removeQuestion(input: {id: $questionID}) {\n    question {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"questionID\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"questionID\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"RemoveQuestionMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"removeQuestion\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"QuestionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"question\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizRemoveQuestionMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizRemoveQuestionMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizRemoveQuestionMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizRemoveQuestionMutation(\\n  $questionID: ID!\\n) {\\n  removeQuestion(input: {id: $questionID}) {\\n    question {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'dc77d4774663d662f4e343e9c67e1cf4';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizPostAnswerMutationVariables = {\n    teamID: string;\n    answer: string;\n};\nexport type quizPostAnswerMutationResponse = {\n    readonly postAnswer: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizPostAnswerMutation = {\n    readonly response: quizPostAnswerMutationResponse;\n    readonly variables: quizPostAnswerMutationVariables;\n};\n\n\n\n/*\nmutation quizPostAnswerMutation(\n  $teamID: ID!\n  $answer: String!\n) {\n  postAnswer(input: {id: $teamID, answer: $answer}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamID\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"answer\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"answer\",\n            \"variableName\": \"answer\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"teamID\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"PostAnswerMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"postAnswer\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizPostAnswerMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizPostAnswerMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizPostAnswerMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizPostAnswerMutation(\\n  $teamID: ID!\\n  $answer: String!\\n) {\\n  postAnswer(input: {id: $teamID, answer: $answer}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'f332d794d8d07962dbca0cfcf048f859';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type ScoreEnum = \"PARTIAL\" | \"RIGHT\" | \"WRONG\" | \"%future added value\";\nexport type quizScoreAnswerMutationVariables = {\n    answerID: string;\n    score: ScoreEnum;\n};\nexport type quizScoreAnswerMutationResponse = {\n    readonly scoreAnswer: {\n        readonly answer: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizScoreAnswerMutation = {\n    readonly response: quizScoreAnswerMutationResponse;\n    readonly variables: quizScoreAnswerMutationVariables;\n};\n\n\n\n/*\nmutation quizScoreAnswerMutation(\n  $answerID: ID!\n  $score: ScoreEnum!\n) {\n  scoreAnswer(input: {id: $answerID, score: $score}) {\n    answer {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"answerID\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"score\",\n    \"type\": \"ScoreEnum!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"id\",\n            \"variableName\": \"answerID\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"score\",\n            \"variableName\": \"score\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"ScoreAnswerMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"scoreAnswer\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"AnswerNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"answer\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizScoreAnswerMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizScoreAnswerMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizScoreAnswerMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizScoreAnswerMutation(\\n  $answerID: ID!\\n  $score: ScoreEnum!\\n) {\\n  scoreAnswer(input: {id: $answerID, score: $score}) {\\n    answer {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '81d0012e1108624c0cb06bd13ae30997';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizCreateTeamMutationVariables = {\n    topicId: string;\n    name: string;\n};\nexport type quizCreateTeamMutationResponse = {\n    readonly createTeam: {\n        readonly team: {\n            readonly id: string;\n            readonly name: string;\n            readonly creator: {\n                readonly username: string;\n            };\n            readonly createdAt: unknown;\n        } | null;\n    } | null;\n};\nexport type quizCreateTeamMutation = {\n    readonly response: quizCreateTeamMutationResponse;\n    readonly variables: quizCreateTeamMutationVariables;\n};\n\n\n\n/*\nmutation quizCreateTeamMutation(\n  $topicId: ID!\n  $name: String!\n) {\n  createTeam(input: {topicId: $topicId, name: $name}) {\n    team {\n      id\n      name\n      creator {\n        username\n        id\n      }\n      createdAt\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"topicId\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"fields\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"topicId\",\n        \"variableName\": \"topicId\"\n      }\n    ],\n    \"kind\": \"ObjectValue\",\n    \"name\": \"input\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"createdAt\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizCreateTeamMutation\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"CreateTeamMutationPayload\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"createTeam\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TeamNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"team\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"creator\",\n                \"plural\": false,\n                \"selections\": [\n                  (v4/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              (v5/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizCreateTeamMutation\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"CreateTeamMutationPayload\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"createTeam\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TeamNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"team\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"creator\",\n                \"plural\": false,\n                \"selections\": [\n                  (v4/*: any*/),\n                  (v2/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              (v5/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizCreateTeamMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizCreateTeamMutation(\\n  $topicId: ID!\\n  $name: String!\\n) {\\n  createTeam(input: {topicId: $topicId, name: $name}) {\\n    team {\\n      id\\n      name\\n      creator {\\n        username\\n        id\\n      }\\n      createdAt\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '4fcc21ef377e228491034a64faeb7e52';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizAddMemberMutationVariables = {\n    teamId: string;\n    username: string;\n};\nexport type quizAddMemberMutationResponse = {\n    readonly addMember: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizAddMemberMutation = {\n    readonly response: quizAddMemberMutationResponse;\n    readonly variables: quizAddMemberMutationVariables;\n};\n\n\n\n/*\nmutation quizAddMemberMutation(\n  $teamId: ID!\n  $username: String!\n) {\n  addMember(input: {teamId: $teamId, username: $username}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamId\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"username\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"teamId\",\n            \"variableName\": \"teamId\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"username\",\n            \"variableName\": \"username\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"AddMemberMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"addMember\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizAddMemberMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizAddMemberMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizAddMemberMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizAddMemberMutation(\\n  $teamId: ID!\\n  $username: String!\\n) {\\n  addMember(input: {teamId: $teamId, username: $username}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '53e312549a7b142a11df33ca38d25cf0';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizRemoveMemberMutationVariables = {\n    teamId: string;\n    username?: string | null;\n};\nexport type quizRemoveMemberMutationResponse = {\n    readonly removeMember: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizRemoveMemberMutation = {\n    readonly response: quizRemoveMemberMutationResponse;\n    readonly variables: quizRemoveMemberMutationVariables;\n};\n\n\n\n/*\nmutation quizRemoveMemberMutation(\n  $teamId: ID!\n  $username: String\n) {\n  removeMember(input: {teamId: $teamId, username: $username}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamId\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"username\",\n    \"type\": \"String\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"teamId\",\n            \"variableName\": \"teamId\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"username\",\n            \"variableName\": \"username\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"RemoveMemberMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"removeMember\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizRemoveMemberMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizRemoveMemberMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizRemoveMemberMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizRemoveMemberMutation(\\n  $teamId: ID!\\n  $username: String\\n) {\\n  removeMember(input: {teamId: $teamId, username: $username}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'aa96a0dd674503ad5f0d6091a59cea68';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type ModeEnum = \"COMPETITION\" | \"TRAIN\" | \"%future added value\";\nexport type quizSetModeMutationVariables = {\n    teamId: string;\n    mode: ModeEnum;\n};\nexport type quizSetModeMutationResponse = {\n    readonly setMode: {\n        readonly team: {\n            readonly id: string;\n        } | null;\n    } | null;\n};\nexport type quizSetModeMutation = {\n    readonly response: quizSetModeMutationResponse;\n    readonly variables: quizSetModeMutationVariables;\n};\n\n\n\n/*\nmutation quizSetModeMutation(\n  $teamId: ID!\n  $mode: ModeEnum!\n) {\n  setMode(input: {teamId: $teamId, mode: $mode}) {\n    team {\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamId\",\n    \"type\": \"ID!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"mode\",\n    \"type\": \"ModeEnum!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"mode\",\n            \"variableName\": \"mode\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"teamId\",\n            \"variableName\": \"teamId\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"SetModeMutationPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"setMode\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizSetModeMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizSetModeMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizSetModeMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation quizSetModeMutation(\\n  $teamId: ID!\\n  $mode: ModeEnum!\\n) {\\n  setMode(input: {teamId: $teamId, mode: $mode}) {\\n    team {\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '0f93e7880ac5ff9af46719f9a9cc3252';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizTopicsQueryVariables = {\n    query: string;\n};\nexport type quizTopicsQueryResponse = {\n    readonly topics: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly name: string;\n                readonly code: string;\n                readonly id: string;\n            } | null;\n        } | null>;\n    } | null;\n};\nexport type quizTopicsQuery = {\n    readonly response: quizTopicsQueryResponse;\n    readonly variables: quizTopicsQueryVariables;\n};\n\n\n\n/*\nquery quizTopicsQuery(\n  $query: String!\n) {\n  topics(query: $query) {\n    edges {\n      node {\n        name\n        code\n        id\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"query\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"query\",\n        \"variableName\": \"query\"\n      }\n    ],\n    \"concreteType\": \"TopicNodeConnection\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"topics\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TopicNodeEdge\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"edges\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"node\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"name\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"code\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"id\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizTopicsQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizTopicsQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizTopicsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query quizTopicsQuery(\\n  $query: String!\\n) {\\n  topics(query: $query) {\\n    edges {\\n      node {\\n        name\\n        code\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '005f0b78c80e524ae12a0b981182e548';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type quizUsersQueryVariables = {\n    query: string;\n};\nexport type quizUsersQueryResponse = {\n    readonly users: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly firstName: string;\n                readonly lastName: string;\n                readonly username: string;\n            } | null;\n        } | null>;\n    } | null;\n};\nexport type quizUsersQuery = {\n    readonly response: quizUsersQueryResponse;\n    readonly variables: quizUsersQueryVariables;\n};\n\n\n\n/*\nquery quizUsersQuery(\n  $query: String!\n) {\n  users(username_Icontains: $query) {\n    edges {\n      node {\n        firstName\n        lastName\n        username\n        id\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"query\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"username_Icontains\",\n    \"variableName\": \"query\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"firstName\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lastName\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"quizUsersQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"UserNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"users\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"UserNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/)\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"quizUsersQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"UserNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"users\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"UserNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"kind\": \"ScalarField\",\n                    \"name\": \"id\",\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"quizUsersQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query quizUsersQuery(\\n  $query: String!\\n) {\\n  users(username_Icontains: $query) {\\n    edges {\\n      node {\\n        firstName\\n        lastName\\n        username\\n        id\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'b86eee96b6a63751b4c6ac8e175664e8';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ReaderFragment } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type UserBadge_user = {\n    readonly firstName: string;\n    readonly lastName: string;\n    readonly \" $refType\": \"UserBadge_user\";\n};\nexport type UserBadge_user$data = UserBadge_user;\nexport type UserBadge_user$key = {\n    readonly \" $data\"?: UserBadge_user$data;\n    readonly \" $fragmentRefs\": FragmentRefs<\"UserBadge_user\">;\n};\n\n\n\nconst node: ReaderFragment = {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"UserBadge_user\",\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"firstName\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"lastName\",\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"UserNode\"\n};\n(node as any).hash = '1298ae5f93b349eaada1dc038532d8c9';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type TeamMode = \"COMPETITION\" | \"TRAIN\" | \"%future added value\";\nexport type TeamState = \"ANSWER\" | \"ARCHIVED\" | \"DONE\" | \"OPEN\" | \"QUESTION\" | \"SCORING\" | \"%future added value\";\nexport type TeamsPageQueryVariables = {};\nexport type TeamsPageQueryResponse = {\n    readonly teams: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly id: string;\n                readonly name: string;\n                readonly mode: TeamMode;\n                readonly state: TeamState;\n                readonly createdAt: unknown;\n                readonly creator: {\n                    readonly \" $fragmentRefs\": FragmentRefs<\"UserBadge_user\">;\n                };\n                readonly topic: {\n                    readonly name: string;\n                    readonly code: string;\n                };\n            } | null;\n        } | null>;\n    } | null;\n};\nexport type TeamsPageQuery = {\n    readonly response: TeamsPageQueryResponse;\n    readonly variables: TeamsPageQueryVariables;\n};\n\n\n\n/*\nquery TeamsPageQuery {\n  teams {\n    edges {\n      node {\n        id\n        name\n        mode\n        state\n        createdAt\n        creator {\n          ...UserBadge_user\n          id\n        }\n        topic {\n          name\n          code\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment UserBadge_user on UserNode {\n  firstName\n  lastName\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"mode\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"state\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"createdAt\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"code\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"TeamsPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"teams\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TeamNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"TeamNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v0/*: any*/),\n                  (v1/*: any*/),\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"UserNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"creator\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"args\": null,\n                        \"kind\": \"FragmentSpread\",\n                        \"name\": \"UserBadge_user\"\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"TopicNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"topic\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v1/*: any*/),\n                      (v5/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"TeamsPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TeamNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"teams\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TeamNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"TeamNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v0/*: any*/),\n                  (v1/*: any*/),\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"UserNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"creator\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"firstName\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"lastName\",\n                        \"storageKey\": null\n                      },\n                      (v0/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"TopicNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"topic\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v1/*: any*/),\n                      (v5/*: any*/),\n                      (v0/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"TeamsPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query TeamsPageQuery {\\n  teams {\\n    edges {\\n      node {\\n        id\\n        name\\n        mode\\n        state\\n        createdAt\\n        creator {\\n          ...UserBadge_user\\n          id\\n        }\\n        topic {\\n          name\\n          code\\n          id\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfragment UserBadge_user on UserNode {\\n  firstName\\n  lastName\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'eead38a8f7f6245102496f9a53aee2bc';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type QuizRendererSubscriptionVariables = {\n    teamID: string;\n};\nexport type QuizRendererSubscriptionResponse = {\n    readonly teamUpdated: {\n        readonly \" $fragmentRefs\": FragmentRefs<\"QuizRenderer_team\">;\n    } | null;\n};\nexport type QuizRendererSubscription = {\n    readonly response: QuizRendererSubscriptionResponse;\n    readonly variables: QuizRendererSubscriptionVariables;\n};\n\n\n\n/*\nsubscription QuizRendererSubscription(\n  $teamID: ID!\n) {\n  teamUpdated(id: $teamID) {\n    ...QuizRenderer_team\n    id\n  }\n}\n\nfragment QuizRenderer_team on TeamNode {\n  id\n  creator {\n    id\n    username\n    firstName\n    lastName\n    isMe\n  }\n  createdAt\n  name\n  topic {\n    id\n    code\n    name\n  }\n  mode\n  state\n  userDone\n  currentQuestion {\n    id\n    question\n    modelAnswer\n    author {\n      username\n      ...UserBadge_user\n      isMe\n      id\n    }\n    answerSet {\n      edges {\n        node {\n          id\n          answer\n          score\n          author {\n            username\n            lastName\n            firstName\n            isMe\n            ...UserBadge_user\n            id\n          }\n        }\n      }\n    }\n  }\n  questionCount\n  questionNumber\n  membershipSet {\n    edges {\n      node {\n        id\n        user {\n          id\n          username\n          lastName\n          firstName\n          isMe\n        }\n        right\n        wrong\n        partial\n        score\n      }\n    }\n  }\n}\n\nfragment UserBadge_user on UserNode {\n  firstName\n  lastName\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"teamID\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"teamID\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"firstName\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lastName\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isMe\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"score\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"QuizRendererSubscription\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"teamUpdated\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"QuizRenderer_team\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Subscription\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"QuizRendererSubscription\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"teamUpdated\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"UserNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"creator\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"createdAt\",\n            \"storageKey\": null\n          },\n          (v7/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"topic\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"code\",\n                \"storageKey\": null\n              },\n              (v7/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"mode\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"state\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"userDone\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"QuestionNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"currentQuestion\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"question\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"modelAnswer\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"author\",\n                \"plural\": false,\n                \"selections\": [\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  (v5/*: any*/),\n                  (v6/*: any*/),\n                  (v2/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"AnswerNodeConnection\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"answerSet\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"AnswerNodeEdge\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"edges\",\n                    \"plural\": true,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"AnswerNode\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"node\",\n                        \"plural\": false,\n                        \"selections\": [\n                          (v2/*: any*/),\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"answer\",\n                            \"storageKey\": null\n                          },\n                          (v8/*: any*/),\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"UserNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"author\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v3/*: any*/),\n                              (v5/*: any*/),\n                              (v4/*: any*/),\n                              (v6/*: any*/),\n                              (v2/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"questionCount\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"questionNumber\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"MembershipNodeConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"membershipSet\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"MembershipNodeEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"MembershipNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v2/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"UserNode\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"user\",\n                        \"plural\": false,\n                        \"selections\": [\n                          (v2/*: any*/),\n                          (v3/*: any*/),\n                          (v5/*: any*/),\n                          (v4/*: any*/),\n                          (v6/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"right\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"wrong\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"partial\",\n                        \"storageKey\": null\n                      },\n                      (v8/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"QuizRendererSubscription\",\n    \"operationKind\": \"subscription\",\n    \"text\": \"subscription QuizRendererSubscription(\\n  $teamID: ID!\\n) {\\n  teamUpdated(id: $teamID) {\\n    ...QuizRenderer_team\\n    id\\n  }\\n}\\n\\nfragment QuizRenderer_team on TeamNode {\\n  id\\n  creator {\\n    id\\n    username\\n    firstName\\n    lastName\\n    isMe\\n  }\\n  createdAt\\n  name\\n  topic {\\n    id\\n    code\\n    name\\n  }\\n  mode\\n  state\\n  userDone\\n  currentQuestion {\\n    id\\n    question\\n    modelAnswer\\n    author {\\n      username\\n      ...UserBadge_user\\n      isMe\\n      id\\n    }\\n    answerSet {\\n      edges {\\n        node {\\n          id\\n          answer\\n          score\\n          author {\\n            username\\n            lastName\\n            firstName\\n            isMe\\n            ...UserBadge_user\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n  questionCount\\n  questionNumber\\n  membershipSet {\\n    edges {\\n      node {\\n        id\\n        user {\\n          id\\n          username\\n          lastName\\n          firstName\\n          isMe\\n        }\\n        right\\n        wrong\\n        partial\\n        score\\n      }\\n    }\\n  }\\n}\\n\\nfragment UserBadge_user on UserNode {\\n  firstName\\n  lastName\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '3caa294920ecf0281d22f38cdbca1b88';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ReaderFragment } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type AnswerScore = \"A_0\" | \"A_1\" | \"A_3\" | \"%future added value\";\nexport type TeamMode = \"COMPETITION\" | \"TRAIN\" | \"%future added value\";\nexport type TeamState = \"ANSWER\" | \"ARCHIVED\" | \"DONE\" | \"OPEN\" | \"QUESTION\" | \"SCORING\" | \"%future added value\";\nexport type QuizRenderer_team = {\n    readonly id: string;\n    readonly creator: {\n        readonly id: string;\n        readonly username: string;\n        readonly firstName: string;\n        readonly lastName: string;\n        readonly isMe: boolean | null;\n    };\n    readonly createdAt: unknown;\n    readonly name: string;\n    readonly topic: {\n        readonly id: string;\n        readonly code: string;\n        readonly name: string;\n    };\n    readonly mode: TeamMode;\n    readonly state: TeamState;\n    readonly userDone: boolean | null;\n    readonly currentQuestion: {\n        readonly id: string;\n        readonly question: string;\n        readonly modelAnswer: string;\n        readonly author: {\n            readonly username: string;\n            readonly isMe: boolean | null;\n            readonly \" $fragmentRefs\": FragmentRefs<\"UserBadge_user\">;\n        };\n        readonly answerSet: {\n            readonly edges: ReadonlyArray<{\n                readonly node: {\n                    readonly id: string;\n                    readonly answer: string;\n                    readonly score: AnswerScore | null;\n                    readonly author: {\n                        readonly username: string;\n                        readonly lastName: string;\n                        readonly firstName: string;\n                        readonly isMe: boolean | null;\n                        readonly \" $fragmentRefs\": FragmentRefs<\"UserBadge_user\">;\n                    };\n                } | null;\n            } | null>;\n        };\n    } | null;\n    readonly questionCount: number | null;\n    readonly questionNumber: number | null;\n    readonly membershipSet: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly id: string;\n                readonly user: {\n                    readonly id: string;\n                    readonly username: string;\n                    readonly lastName: string;\n                    readonly firstName: string;\n                    readonly isMe: boolean | null;\n                };\n                readonly right: number;\n                readonly wrong: number;\n                readonly partial: number;\n                readonly score: number | null;\n            } | null;\n        } | null>;\n    };\n    readonly \" $refType\": \"QuizRenderer_team\";\n};\nexport type QuizRenderer_team$data = QuizRenderer_team;\nexport type QuizRenderer_team$key = {\n    readonly \" $data\"?: QuizRenderer_team$data;\n    readonly \" $fragmentRefs\": FragmentRefs<\"QuizRenderer_team\">;\n};\n\n\n\nconst node: ReaderFragment = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"firstName\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lastName\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isMe\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv6 = {\n  \"args\": null,\n  \"kind\": \"FragmentSpread\",\n  \"name\": \"UserBadge_user\"\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"score\",\n  \"storageKey\": null\n};\nreturn {\n  \"argumentDefinitions\": [],\n  \"kind\": \"Fragment\",\n  \"metadata\": null,\n  \"name\": \"QuizRenderer_team\",\n  \"selections\": [\n    (v0/*: any*/),\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"UserNode\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"creator\",\n      \"plural\": false,\n      \"selections\": [\n        (v0/*: any*/),\n        (v1/*: any*/),\n        (v2/*: any*/),\n        (v3/*: any*/),\n        (v4/*: any*/)\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"createdAt\",\n      \"storageKey\": null\n    },\n    (v5/*: any*/),\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"TopicNode\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"topic\",\n      \"plural\": false,\n      \"selections\": [\n        (v0/*: any*/),\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"code\",\n          \"storageKey\": null\n        },\n        (v5/*: any*/)\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"mode\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"state\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"userDone\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"QuestionNode\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"currentQuestion\",\n      \"plural\": false,\n      \"selections\": [\n        (v0/*: any*/),\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"question\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"modelAnswer\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"UserNode\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"author\",\n          \"plural\": false,\n          \"selections\": [\n            (v1/*: any*/),\n            (v4/*: any*/),\n            (v6/*: any*/)\n          ],\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"AnswerNodeConnection\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"answerSet\",\n          \"plural\": false,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"AnswerNodeEdge\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"edges\",\n              \"plural\": true,\n              \"selections\": [\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"concreteType\": \"AnswerNode\",\n                  \"kind\": \"LinkedField\",\n                  \"name\": \"node\",\n                  \"plural\": false,\n                  \"selections\": [\n                    (v0/*: any*/),\n                    {\n                      \"alias\": null,\n                      \"args\": null,\n                      \"kind\": \"ScalarField\",\n                      \"name\": \"answer\",\n                      \"storageKey\": null\n                    },\n                    (v7/*: any*/),\n                    {\n                      \"alias\": null,\n                      \"args\": null,\n                      \"concreteType\": \"UserNode\",\n                      \"kind\": \"LinkedField\",\n                      \"name\": \"author\",\n                      \"plural\": false,\n                      \"selections\": [\n                        (v1/*: any*/),\n                        (v3/*: any*/),\n                        (v2/*: any*/),\n                        (v4/*: any*/),\n                        (v6/*: any*/)\n                      ],\n                      \"storageKey\": null\n                    }\n                  ],\n                  \"storageKey\": null\n                }\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"questionCount\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"kind\": \"ScalarField\",\n      \"name\": \"questionNumber\",\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"MembershipNodeConnection\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"membershipSet\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"concreteType\": \"MembershipNodeEdge\",\n          \"kind\": \"LinkedField\",\n          \"name\": \"edges\",\n          \"plural\": true,\n          \"selections\": [\n            {\n              \"alias\": null,\n              \"args\": null,\n              \"concreteType\": \"MembershipNode\",\n              \"kind\": \"LinkedField\",\n              \"name\": \"node\",\n              \"plural\": false,\n              \"selections\": [\n                (v0/*: any*/),\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"concreteType\": \"UserNode\",\n                  \"kind\": \"LinkedField\",\n                  \"name\": \"user\",\n                  \"plural\": false,\n                  \"selections\": [\n                    (v0/*: any*/),\n                    (v1/*: any*/),\n                    (v3/*: any*/),\n                    (v2/*: any*/),\n                    (v4/*: any*/)\n                  ],\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"right\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"wrong\",\n                  \"storageKey\": null\n                },\n                {\n                  \"alias\": null,\n                  \"args\": null,\n                  \"kind\": \"ScalarField\",\n                  \"name\": \"partial\",\n                  \"storageKey\": null\n                },\n                (v7/*: any*/)\n              ],\n              \"storageKey\": null\n            }\n          ],\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"type\": \"TeamNode\"\n};\n})();\n(node as any).hash = '56e1bd1ef4701e0eaaa6aad416971ef0';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type PlayPageQueryVariables = {\n    id: string;\n};\nexport type PlayPageQueryResponse = {\n    readonly team: {\n        readonly \" $fragmentRefs\": FragmentRefs<\"QuizRenderer_team\">;\n    } | null;\n};\nexport type PlayPageQuery = {\n    readonly response: PlayPageQueryResponse;\n    readonly variables: PlayPageQueryVariables;\n};\n\n\n\n/*\nquery PlayPageQuery(\n  $id: ID!\n) {\n  team(id: $id) {\n    ...QuizRenderer_team\n    id\n  }\n}\n\nfragment QuizRenderer_team on TeamNode {\n  id\n  creator {\n    id\n    username\n    firstName\n    lastName\n    isMe\n  }\n  createdAt\n  name\n  topic {\n    id\n    code\n    name\n  }\n  mode\n  state\n  userDone\n  currentQuestion {\n    id\n    question\n    modelAnswer\n    author {\n      username\n      ...UserBadge_user\n      isMe\n      id\n    }\n    answerSet {\n      edges {\n        node {\n          id\n          answer\n          score\n          author {\n            username\n            lastName\n            firstName\n            isMe\n            ...UserBadge_user\n            id\n          }\n        }\n      }\n    }\n  }\n  questionCount\n  questionNumber\n  membershipSet {\n    edges {\n      node {\n        id\n        user {\n          id\n          username\n          lastName\n          firstName\n          isMe\n        }\n        right\n        wrong\n        partial\n        score\n      }\n    }\n  }\n}\n\nfragment UserBadge_user on UserNode {\n  firstName\n  lastName\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"id\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"id\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"username\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"firstName\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"lastName\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isMe\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"score\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"PlayPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"QuizRenderer_team\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"PlayPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TeamNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"team\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"UserNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"creator\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v4/*: any*/),\n              (v5/*: any*/),\n              (v6/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"createdAt\",\n            \"storageKey\": null\n          },\n          (v7/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"topic\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"code\",\n                \"storageKey\": null\n              },\n              (v7/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"mode\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"state\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"userDone\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"QuestionNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"currentQuestion\",\n            \"plural\": false,\n            \"selections\": [\n              (v2/*: any*/),\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"question\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"modelAnswer\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"UserNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"author\",\n                \"plural\": false,\n                \"selections\": [\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  (v5/*: any*/),\n                  (v6/*: any*/),\n                  (v2/*: any*/)\n                ],\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"AnswerNodeConnection\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"answerSet\",\n                \"plural\": false,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"AnswerNodeEdge\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"edges\",\n                    \"plural\": true,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"AnswerNode\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"node\",\n                        \"plural\": false,\n                        \"selections\": [\n                          (v2/*: any*/),\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"kind\": \"ScalarField\",\n                            \"name\": \"answer\",\n                            \"storageKey\": null\n                          },\n                          (v8/*: any*/),\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"UserNode\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"author\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v3/*: any*/),\n                              (v5/*: any*/),\n                              (v4/*: any*/),\n                              (v6/*: any*/),\n                              (v2/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          }\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"questionCount\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"questionNumber\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"MembershipNodeConnection\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"membershipSet\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"MembershipNodeEdge\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"edges\",\n                \"plural\": true,\n                \"selections\": [\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"MembershipNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"node\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v2/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"UserNode\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"user\",\n                        \"plural\": false,\n                        \"selections\": [\n                          (v2/*: any*/),\n                          (v3/*: any*/),\n                          (v5/*: any*/),\n                          (v4/*: any*/),\n                          (v6/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"right\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"wrong\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"partial\",\n                        \"storageKey\": null\n                      },\n                      (v8/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"PlayPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query PlayPageQuery(\\n  $id: ID!\\n) {\\n  team(id: $id) {\\n    ...QuizRenderer_team\\n    id\\n  }\\n}\\n\\nfragment QuizRenderer_team on TeamNode {\\n  id\\n  creator {\\n    id\\n    username\\n    firstName\\n    lastName\\n    isMe\\n  }\\n  createdAt\\n  name\\n  topic {\\n    id\\n    code\\n    name\\n  }\\n  mode\\n  state\\n  userDone\\n  currentQuestion {\\n    id\\n    question\\n    modelAnswer\\n    author {\\n      username\\n      ...UserBadge_user\\n      isMe\\n      id\\n    }\\n    answerSet {\\n      edges {\\n        node {\\n          id\\n          answer\\n          score\\n          author {\\n            username\\n            lastName\\n            firstName\\n            isMe\\n            ...UserBadge_user\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n  questionCount\\n  questionNumber\\n  membershipSet {\\n    edges {\\n      node {\\n        id\\n        user {\\n          id\\n          username\\n          lastName\\n          firstName\\n          isMe\\n        }\\n        right\\n        wrong\\n        partial\\n        score\\n      }\\n    }\\n  }\\n}\\n\\nfragment UserBadge_user on UserNode {\\n  firstName\\n  lastName\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '23086c44d84a9ae01039007378fd6732';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type LoginPageMutationVariables = {\n    username: string;\n    password: string;\n};\nexport type LoginPageMutationResponse = {\n    readonly tokenAuth: {\n        readonly token: string;\n    } | null;\n};\nexport type LoginPageMutation = {\n    readonly response: LoginPageMutationResponse;\n    readonly variables: LoginPageMutationVariables;\n};\n\n\n\n/*\nmutation LoginPageMutation(\n  $username: String!\n  $password: String!\n) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"username\",\n    \"type\": \"String!\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"password\",\n    \"type\": \"String!\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"password\",\n            \"variableName\": \"password\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"username\",\n            \"variableName\": \"username\"\n          }\n        ],\n        \"kind\": \"ObjectValue\",\n        \"name\": \"input\"\n      }\n    ],\n    \"concreteType\": \"ObtainJSONWebTokenPayload\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"tokenAuth\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"token\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"LoginPageMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"LoginPageMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"LoginPageMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation LoginPageMutation(\\n  $username: String!\\n  $password: String!\\n) {\\n  tokenAuth(input: {username: $username, password: $password}) {\\n    token\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '64181449dfb3620d69e99f1a0abc23c3';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type KBPageQueryVariables = {};\nexport type KBPageQueryResponse = {\n    readonly topics: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly id: string;\n                readonly name: string;\n                readonly code: string;\n                readonly questionCount: number | null;\n            } | null;\n        } | null>;\n    } | null;\n};\nexport type KBPageQuery = {\n    readonly response: KBPageQueryResponse;\n    readonly variables: KBPageQueryVariables;\n};\n\n\n\n/*\nquery KBPageQuery {\n  topics(first: 20, orderBy: \"-questionCount\") {\n    edges {\n      node {\n        id\n        name\n        code\n        questionCount\n      }\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"first\",\n        \"value\": 20\n      },\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"orderBy\",\n        \"value\": \"-questionCount\"\n      }\n    ],\n    \"concreteType\": \"TopicNodeConnection\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"topics\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"TopicNodeEdge\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"edges\",\n        \"plural\": true,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"node\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"id\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"name\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"code\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"questionCount\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": \"topics(first:20,orderBy:\\\"-questionCount\\\")\"\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"KBPageQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"KBPageQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"KBPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query KBPageQuery {\\n  topics(first: 20, orderBy: \\\"-questionCount\\\") {\\n    edges {\\n      node {\\n        id\\n        name\\n        code\\n        questionCount\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'd9dc5147d11c4a0692631422047d1b0f';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type KBBrowsePageTopicQueryVariables = {\n    topicID: string;\n};\nexport type KBBrowsePageTopicQueryResponse = {\n    readonly topic: {\n        readonly name: string;\n        readonly code: string;\n    } | null;\n};\nexport type KBBrowsePageTopicQuery = {\n    readonly response: KBBrowsePageTopicQueryResponse;\n    readonly variables: KBBrowsePageTopicQueryVariables;\n};\n\n\n\n/*\nquery KBBrowsePageTopicQuery(\n  $topicID: ID!\n) {\n  topic(id: $topicID) {\n    name\n    code\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"topicID\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"topicID\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"code\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"KBBrowsePageTopicQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TopicNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"topic\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"KBBrowsePageTopicQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"TopicNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"topic\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"KBBrowsePageTopicQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query KBBrowsePageTopicQuery(\\n  $topicID: ID!\\n) {\\n  topic(id: $topicID) {\\n    name\\n    code\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '6c346e40e40678f557f612fcafbb9819';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nimport { FragmentRefs } from \"relay-runtime\";\nexport type KBBrowsePageQueryVariables = {\n    topicID?: string | null;\n    query?: string | null;\n    own?: boolean | null;\n};\nexport type KBBrowsePageQueryResponse = {\n    readonly questions: {\n        readonly edges: ReadonlyArray<{\n            readonly node: {\n                readonly id: string;\n                readonly question: string;\n                readonly modelAnswer: string;\n                readonly author: {\n                    readonly email: string;\n                    readonly isMe: boolean | null;\n                    readonly \" $fragmentRefs\": FragmentRefs<\"UserBadge_user\">;\n                };\n                readonly topic: {\n                    readonly name: string;\n                    readonly code: string;\n                };\n            } | null;\n        } | null>;\n    } | null;\n};\nexport type KBBrowsePageQuery = {\n    readonly response: KBBrowsePageQueryResponse;\n    readonly variables: KBBrowsePageQueryVariables;\n};\n\n\n\n/*\nquery KBBrowsePageQuery(\n  $topicID: ID\n  $query: String\n  $own: Boolean\n) {\n  questions(topic: $topicID, query: $query, own: $own) {\n    edges {\n      node {\n        id\n        question\n        modelAnswer\n        author {\n          ...UserBadge_user\n          email\n          isMe\n          id\n        }\n        topic {\n          name\n          code\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment UserBadge_user on UserNode {\n  firstName\n  lastName\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"topicID\",\n    \"type\": \"ID\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"query\",\n    \"type\": \"String\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"own\",\n    \"type\": \"Boolean\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"own\",\n    \"variableName\": \"own\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"query\",\n    \"variableName\": \"query\"\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"topic\",\n    \"variableName\": \"topicID\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"question\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"modelAnswer\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"email\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isMe\",\n  \"storageKey\": null\n},\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"code\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"KBBrowsePageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"QuestionNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"questions\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"QuestionNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"QuestionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"UserNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"author\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v5/*: any*/),\n                      (v6/*: any*/),\n                      {\n                        \"args\": null,\n                        \"kind\": \"FragmentSpread\",\n                        \"name\": \"UserBadge_user\"\n                      }\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"TopicNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"topic\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v7/*: any*/),\n                      (v8/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"KBBrowsePageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"QuestionNodeConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"questions\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"QuestionNodeEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"QuestionNode\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"UserNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"author\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"firstName\",\n                        \"storageKey\": null\n                      },\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"kind\": \"ScalarField\",\n                        \"name\": \"lastName\",\n                        \"storageKey\": null\n                      },\n                      (v5/*: any*/),\n                      (v6/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"TopicNode\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"topic\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v7/*: any*/),\n                      (v8/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"KBBrowsePageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query KBBrowsePageQuery(\\n  $topicID: ID\\n  $query: String\\n  $own: Boolean\\n) {\\n  questions(topic: $topicID, query: $query, own: $own) {\\n    edges {\\n      node {\\n        id\\n        question\\n        modelAnswer\\n        author {\\n          ...UserBadge_user\\n          email\\n          isMe\\n          id\\n        }\\n        topic {\\n          name\\n          code\\n          id\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfragment UserBadge_user on UserNode {\\n  firstName\\n  lastName\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '69018ffaf1979a3d562dbdf242ae75df';\nexport default node;\n","/* tslint:disable */\n/* eslint-disable */\n\nimport { ConcreteRequest } from \"relay-runtime\";\nexport type QuestionEditPageQueryVariables = {\n    questionID: string;\n};\nexport type QuestionEditPageQueryResponse = {\n    readonly question: {\n        readonly id: string;\n        readonly question: string;\n        readonly modelAnswer: string;\n        readonly topic: {\n            readonly name: string;\n            readonly code: string;\n        };\n    } | null;\n};\nexport type QuestionEditPageQuery = {\n    readonly response: QuestionEditPageQueryResponse;\n    readonly variables: QuestionEditPageQueryVariables;\n};\n\n\n\n/*\nquery QuestionEditPageQuery(\n  $questionID: ID!\n) {\n  question(id: $questionID) {\n    id\n    question\n    modelAnswer\n    topic {\n      name\n      code\n      id\n    }\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"questionID\",\n    \"type\": \"ID!\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"id\",\n    \"variableName\": \"questionID\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"question\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"modelAnswer\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv6 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"code\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"QuestionEditPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"QuestionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"question\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"topic\",\n            \"plural\": false,\n            \"selections\": [\n              (v5/*: any*/),\n              (v6/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"QuestionEditPageQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"QuestionNode\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"question\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"TopicNode\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"topic\",\n            \"plural\": false,\n            \"selections\": [\n              (v5/*: any*/),\n              (v6/*: any*/),\n              (v2/*: any*/)\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"QuestionEditPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query QuestionEditPageQuery(\\n  $questionID: ID!\\n) {\\n  question(id: $questionID) {\\n    id\\n    question\\n    modelAnswer\\n    topic {\\n      name\\n      code\\n      id\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = '38c835c436f373804361135992772e09';\nexport default node;\n","import {\n    Environment,\n    Network,\n    RecordSource,\n    Store,\n    Observable,\n    GraphQLResponse,\n  } from 'relay-runtime';\n\n  import { SubscriptionClient } from 'subscriptions-transport-ws'\nimport { RelayObservable } from 'relay-runtime/lib/network/RelayObservable';\n\n  const API_URL = process.env.REACT_APP_API_URL;\n  const WS_URL = process.env.REACT_APP_WS_URL;\n\n  async function fetchQuery(\n    operation : any,\n    variables : any,\n  ) {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem(\"jwt\")}`\n      },\n      body: JSON.stringify({\n        query: operation.text,\n        variables,\n      }),\n    });\n\n    const result = await response.json();\n    return result;\n    \n  }\n\n\n  const setupSubscription = (config, variables) => {\n    const query = config.text\n    const subscriptionClient = new SubscriptionClient(`${WS_URL}?auth=${localStorage.getItem(\"jwt\")}`,\n      {\n        reconnect: true\n      });    \n    return Observable.create<GraphQLResponse>(sink => {\n        const c = subscriptionClient.request({ query, variables }).subscribe({\n          next: result => {\n            sink.next({data: result.data})\n          }\n        });\n        return {\n          unsubscribe: c.unsubscribe,\n          closed: false\n        }\n    });\n}\n  const environment = new Environment({\n    network: Network.create(fetchQuery, setupSubscription),\n    store: new Store(new RecordSource()),  \n  });\n  \n  export default environment","import React from 'react';\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Container from 'react-bootstrap/Container';\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport UserBadge from \"./UserBadge\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { QueryRenderer } from 'react-relay';\nimport environment from '../lib/relayEnv';\nimport { NavQuery } from \"./__generated__/NavQuery.graphql\";\nimport { logout } from '../lib/auth';\nimport { useHistory } from 'react-router-dom';\n\nexport default function Appbar({auth, setAuth}) {\n  const history = useHistory();\n\n  return (\n    <>\n        <QueryRenderer<NavQuery>\n        environment={environment}\n        query={graphql`\n            query NavQuery {\n                me {\n                    firstName\n                    lastName\n                }\n            }\n        `}\n        variables={{auth}}\n        render= {({props, error, retry}) =>\n            <div className=\"flex-shrink-0\">\n                <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" className=\"row no-gutters border-bottom border-primary my-0 text-light\">\n                    <Container>\n                        <Navbar.Brand href=\"#home\">Q-Teams</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\n                            <Nav className=\"mr-auto\">\n                                <LinkContainer to=\"/\" exact>\n                                    <Nav.Link className=\"m-1\"><i className=\"fas fa-home\"></i> Home</Nav.Link>\n                                </LinkContainer>\n\n                                { (props && props.me) && \n                                    <>\n                                        <LinkContainer to=\"/teams\">\n                                            <Nav.Link className=\"m-1\"><i className=\"fas fa-users\"></i> Spielen</Nav.Link>\n                                        </LinkContainer>\n\n                                        <LinkContainer to=\"/kb\">\n                                            <Nav.Link className=\"m-1\"><i className=\"fas fa-question-circle\"></i> Knowledge Base</Nav.Link>\n                                        </LinkContainer> \n                                    </>                               \n                                }\n                \n                            </Nav>\n\n                            <Navbar.Text className=\"mx-1\">\n                                { (props && props.me) && \n                                    <Navbar.Text className=\"text-primary\">\n                                        <strong>{props.me.firstName} {props.me.lastName}</strong>\n                                    </Navbar.Text> }\n\n                            </Navbar.Text>\n\n                            <Nav>\n                                { (props && props.me) ? \n                                    <Nav.Link onClick={(e) => { logout(); setAuth(false); retry(); history.push(\"/\") } } className=\"m-1\"><i className=\"fas fa-sign-out-alt\"></i> Logout</Nav.Link>\n                                    :\n                                    <LinkContainer to=\"/login\">\n                                        <Nav.Link className=\"m-1\"><i className=\"fas fa-sign-in-alt\"></i> Login</Nav.Link>\n                                    </LinkContainer>\n                                }\n                            </Nav>\n\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        }/>\n    </>\n  );\n}\n\n","import React from \"react\";\n\nexport function logout() {\n    localStorage.removeItem(\"jwt\")\n}","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default class CutImage extends React.Component {\n    render() {\n        const Image = this.props.src;\n        return (\n            <>\n                <Col md={6} className=\"cut-left d-none d-md-block align-self-stretch\" \n                    style={{opacity: 0.17, backgroundSize: \"cover\", backgroundImage: `url(${Image})`}}>\n                                    \n                </Col>\n                <Col md={6} className=\"cut-top d-block d-md-none\">\n                    <img src={Image} className=\"img-fluid semi-transparent\"/>\n                </Col>\n            </>\n        )\n    }\n}","import React from \"react\";\nimport { commitMutation, fetchQuery } from \"react-relay\";\nimport environment from \"./relayEnv\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { QuizRenderer_team } from \"../components/__generated__/QuizRenderer_team.graphql\";\nimport { ScoreEnum } from \"./__generated__/quizScoreAnswerMutation.graphql\";\nimport { ModeEnum } from \"./__generated__/quizSetModeMutation.graphql\";\nimport { quizTopicsQuery} from \"./__generated__/quizTopicsQuery.graphql\"\nimport { quizUsersQuery } from \"./__generated__/quizUsersQuery.graphql\";\n\nexport function nextPhase(teamID: string) {\n    commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizNextPhaseMutation(\n                    $teamID: ID!\n                ) {\n                    nextPhase(input: { id: $teamID }) {\n                        team {\n                            id\n                        }\n                    }\n                }\n            `,\n            variables: { teamID }\n        }\n    )\n}\n\n\nexport function postQuestion(teamID: string, question: string, modelAnswer: string) {\n    commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizPostQuestionMutation(\n                    $teamID: ID!,\n                    $question: String!,\n                    $modelAnswer: String!\n                ) {\n                    postQuestion(input: { \n                            id: $teamID,\n                            question: $question,\n                            modelAnswer: $modelAnswer,\n                        }) \n                    {\n                        team {\n                            id\n                        }\n                    }\n                }\n            `,\n            variables: { teamID, question, modelAnswer }\n        }\n    )\n}\n\nexport function updateQuestion(questionID: string, question: string, modelAnswer: string, onCompleted?: ({error, response}) => void) {\n    commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizUpdateQuestionMutation(\n                    $questionID: ID!,\n                    $question: String!,\n                    $modelAnswer: String!\n                ) {\n                    updateQuestion(input: { \n                            id: $questionID,\n                            question: $question,\n                            modelAnswer: $modelAnswer,\n                        }) \n                    {\n                        question {\n                            id\n                            question\n                            modelAnswer\n                        }\n                    }\n                }\n            `,\n            variables: { questionID, question, modelAnswer },\n            onCompleted\n        }\n    )\n}\n\nexport function removeQuestion(questionID : string, onCompleted?: ({error, response}) => void) {\n    return commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizRemoveQuestionMutation(\n                    $questionID: ID!,\n                ) {\n                    removeQuestion(input: { \n                            id: $questionID,\n                        }) \n                    {\n                        question {\n                            id\n                        }   \n                    }\n                }\n            `,\n            variables: { questionID },\n            configs: [{deletedIDFieldName: \"id\", type: \"NODE_DELETE\"}],\n            onCompleted\n\n        }\n    )   \n}\n\nexport function postAnswer(teamID: string, answer: string) {\n    commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizPostAnswerMutation(\n                    $teamID: ID!,\n                    $answer: String!\n                ) {\n                    postAnswer(input: { \n                            id: $teamID,\n                            answer: $answer,\n                        }) \n                    {\n                        team {\n                            id\n                        }\n                    }\n                }\n            `,\n            variables: { teamID, answer }\n        }\n    )\n}\n\nexport function scoreAnswer(answerID: string, score: ScoreEnum) {\n    commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizScoreAnswerMutation(\n                    $answerID: ID!,\n                    $score: ScoreEnum!\n                ) {\n                    scoreAnswer(input: { \n                            id: $answerID,\n                            score: $score,\n                        }) \n                    {\n                        answer {\n                            id\n                        }\n                    }\n                }\n            `,\n            variables: { answerID, score }\n        }\n    )\n}\n\nexport function createTeam(name: string, topicId: string, onCompleted?: (error, response) => void) {\n    return commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizCreateTeamMutation(\n                    $topicId: ID!,\n                    $name: String!\n                ) {\n                    createTeam(input: { \n                            topicId: $topicId,\n                            name: $name\n                        }) \n                    {\n                        team {\n                            id\n                            name\n                            creator {\n                                username\n                            }\n                            createdAt\n                        }\n                    }\n                }\n            `,\n            variables: { topicId, name },\n            onCompleted\n\n        }\n    )\n}\n\nexport function addMember(teamId : string, username : string, onCompleted?: ({error, response}) => void) {\n    return commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizAddMemberMutation(\n                    $teamId: ID!,\n                    $username: String!\n                ) {\n                    addMember(input: { \n                            teamId: $teamId,\n                            username: $username\n                        }) \n                    {\n                        team {\n                            id\n                        }   \n                    }\n                }\n            `,\n            variables: { teamId, username },\n            onCompleted\n\n        }\n    )\n}\n\nexport function removeMember(teamId : string, username? : string, onCompleted?: ({error, response}) => void) {\n    return commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizRemoveMemberMutation(\n                    $teamId: ID!,\n                    $username: String\n                ) {\n                    removeMember(input: { \n                            teamId: $teamId,\n                            username: $username\n                        }) \n                    {\n                        team {\n                            id\n                        }   \n                    }\n                }\n            `,\n            variables: { teamId, username },\n            onCompleted\n\n        }\n    )\n}\n\nexport function setMode(teamId : string, mode: ModeEnum, onCompleted?: ({error, response}) => void) {\n    return commitMutation(\n        environment,\n        {\n            mutation: graphql`\n                mutation quizSetModeMutation(\n                    $teamId: ID!,\n                    $mode: ModeEnum!\n                ) {\n                    setMode(input: { \n                            teamId: $teamId,\n                            mode: $mode\n                        }) \n                    {\n                        team {\n                            id\n                        }   \n                    }\n                }\n            `,\n            variables: { teamId, mode },\n            onCompleted\n\n        }\n    )\n}\n\nexport async function getTopics(query: string) {\n    let data = await fetchQuery<quizTopicsQuery>(\n        environment,\n        graphql`\n            query quizTopicsQuery($query: String!) {\n                topics(query: $query) {\n                    edges {\n                        node {\n                            name\n                            code\n                            id\n                        }\n                    }\n                }\n            }\n        `,\n        {query}\n    )\n    return data.topics.edges.map((edge) => ({ value: edge.node.id, label: edge.node.code + \" \" + edge.node.name  }));\n}\n\nexport async function getUsers(query: string) {\n    let data = await fetchQuery<quizUsersQuery>(\n        environment,\n        graphql`\n            query quizUsersQuery($query: String!) {\n                users(username_Icontains: $query) {\n                    edges {\n                        node {\n                            firstName\n                            lastName\n                            username\n                        }\n                    }\n                }\n            }\n        `,\n        {query}\n    )\n    return data.users.edges.map((edge) => ({ value: edge.node.username, label: `${edge.node.firstName} ${edge.node.lastName} (@${edge.node.username})` }));\n}\n\n","import React from \"react\";\nimport Avatar from \"react-avatar\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { createFragmentContainer } from \"react-relay\";\n\nfunction UserBadge({user}) {\n    return (\n        <>\n            <Avatar name={user.firstName + \" \" + user.lastName} size=\"1.5em\" round/>\n            <span> </span>{user.firstName} {user.lastName}\n        </>\n    )\n}\n\nexport default createFragmentContainer(\n    UserBadge,\n    {\n        user: graphql`\n            fragment UserBadge_user on UserNode {\n                firstName\n                lastName\n            }\n        `\n    }\n)","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Table from \"react-bootstrap/Table\";\nimport graphql from 'babel-plugin-relay/macro';\nimport {QueryRenderer} from \"react-relay\";\nimport environment from \"../lib/relayEnv\";\nimport {TeamsPageQuery} from \"./__generated__/TeamsPageQuery.graphql\";\nimport moment from \"moment\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport CutImage from \"../CutImage\";\nimport PlayImage from \"../play.jpg\";\nimport * as Yup from \"yup\";\nimport {Form as FormikForm, Formik, Field} from \"formik\";\nimport AsyncSelect from 'react-select/async';\nimport { getTopics, createTeam } from \"../lib/quiz\";\nimport UserBadge from \"../components/UserBadge\";\n\n\nconst teamSchema = Yup.object().shape({\n    name: Yup.string().required(\"Pflichtfeld\"),\n    topic: Yup.object().required(\"Pflichtfeld\")\n})\n\nexport default function PlayPage() {\n    const history = useHistory();\n    let timeout = null;\n\n    return (\n    <>\n        <QueryRenderer<TeamsPageQuery>\n        environment={environment}\n        query={graphql`\n            query TeamsPageQuery {\n                teams {\n                    edges {\n                        node {\n                            id\n                            name\n                            mode\n                            state\n                            createdAt\n                            creator {\n                                ...UserBadge_user\n                            }\n                            topic {\n                                name\n                                code\n                            }\n                        }\n                    }\n                }\n            }\n        `}\n        variables={{}}\n        render={({error, props, retry}) => {\n\n        if(timeout !== null)\n            window.clearTimeout(timeout);\n\n        window.setTimeout(retry, 3000);\n\n        return (\n        <Row noGutters className=\"flex-grow-1 align-items-center h-100\">\n            <Col md={6} className=\"px-5\">\n                <h1>Spielen</h1>\n                <p className=\"lead\">\n                    Wähle ein Team oder erstelle ein neues, damit es losgehen kann.\n                </p>\n                        \n                { props && props.teams.edges.map((edge) => (\n                    <Card key={edge.node.id} className=\"my-3\">\n                        <Card.Body>\n                            <Card.Title>\n                                <Link to={`/teams/${edge.node.id}`} className=\"stretched-link\">\n                                    {edge.node.name}\n                                </Link>\n                                <div className=\"text-muted\"><small>{edge.node.topic.code} {edge.node.topic.name}</small></div>\n                            </Card.Title>\n                            <UserBadge user={edge.node.creator}/>\n                        </Card.Body>\n                    </Card>\n                ))}\n\n                <Card bg=\"light\" className=\"\">\n                    <Card.Body>\n                        <Card.Title>Ein neues Team gründen</Card.Title>\n                            <Formik\n                                validationSchema={teamSchema}\n                                initialValues={{\n                                    name: \"\",\n                                    topic: null\n                                }}\n                                onSubmit={(values, actions) => {\n                                        createTeam(values.name, values.topic.value, (response) => {\n                                            actions.setSubmitting(false);\n                                            history.push(`/teams/${response.createTeam.team.id}`)\n                                        })\n                                    }\n                                }\n                            >   \n                                {({values, errors, isSubmitting, setFieldValue}) => \n                                <div>\n                                <FormikForm>\n                                    <Form.Group>\n                                        <Form.Label>Name</Form.Label>\n                                        <Form.Control name=\"name\" as={Field}/>\n                                    </Form.Group>\n                                    <Form.Group>\n                                        <Form.Label>Thema</Form.Label>\n                                        <AsyncSelect\n                                            placeholder=\"Thema wählen...\"\n                                            cacheOptions \n                                            loadOptions={getTopics} \n                                            noOptionsMessage={(v) => \"Bitte Suchbegriff eingeben...\"} \n                                            onChange={(value) => setFieldValue(\"topic\", value)}\n                                           \n                                        />\n                                    </Form.Group>\n                                    <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                                        { isSubmitting && <span><i className=\"fa fa-spin fa-spinner\"></i> </span>}\n                                        Team gründen\n                                    </Button>\n                                </FormikForm>\n                                </div>\n                                }\n                            </Formik>\n                    </Card.Body>\n                </Card>\n            </Col>\n            <CutImage src={PlayImage}/>\n        </Row>\n        )}}/>\n        </>\n    )\n}","import React from \"react\";\nimport AsyncSelect, { AsyncProps } from \"react-select/async\";\nimport { getUsers } from \"../lib/quiz\";\nimport { CommonProps } from \"react-select\";\n\nfunction noOptions({inputValue} : {inputValue: string}) {\n    if(inputValue.length > 0)\n        return \"Kein Benutzer gefunden.\"\n    else\n        return \"Bitte Benutzernamen eingeben...\"\n}\n\nexport default function<T>(props) {\n    return <AsyncSelect<T> {...props} loadOptions={getUsers} noOptionsMessage={noOptions}/>\n}","import React from \"react\";\nimport { QuizRenderer_team } from \"./__generated__/QuizRenderer_team.graphql\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport SeascapeImg from \"../seascape.jpg\";\nimport CutImage from \"../CutImage\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport { nextPhase, addMember, setMode, removeMember } from \"../lib/quiz\";\nimport UserSelect from \"./UserSelect\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n\n\nexport default function OpenPhase({team} : {team: QuizRenderer_team}) {\n\n\n    return (\n        <>\n        <div className=\"pt-3 px-3\">\n            <h2 className=\"text-center\">Beginn einer neuen Runde</h2>\n            <hr className=\"mb-0\"/>\n        </div>\n        <Row noGutters className=\"align-items-center flex-grow-1 h-100\">\n            <Col md={6} className=\"text-center\">\n                <Container className=\"p-5\">\n                    <h4 className=\"m-3\">\n                        {(team.state == \"DONE\") && \"Gratulation! Ihr habt die aktuelle Runde abgeschlossen.\"}\n                        {(team.state == \"OPEN\") && \"Willkommen in eurem Q-Team  !\"}\n                    </h4>\n                    <p className=\"lead m-3\">\n                        {(team.state == \"DONE\") && \"Möchtet ihr eine weitere Runde spielen?\"}\n                        {(team.state == \"OPEN\") && \"Wenn ihr bereit seid, kann es losgehen.\"}\n                    </p>\n\n                    { team.creator.isMe ?\n                        (team.membershipSet.edges.length >= 2) ?\n                        <Button size=\"lg\" className=\"m-3\" onClick={() => nextPhase(team.id)}>\n                            <i className=\"fas fa-play\"></i> Neue Runde starten\n                        </Button>\n                        :\n                        <p className=\"text-muted\">\n                            <i className=\"fas fa-info-circle\"></i> Um die Runde zu starten, muss das Team mindestens zwei Mitglieder haben.\n                        </p>\n                        :\n                        <p className=\"text-muted\">\n                            <i className=\"fas fa-shield-alt\"></i> Nur <em>{team.creator.firstName + \" \" + team.creator.lastName}</em> kann eine neue Runde starten.  \n                        </p>\n                    }\n                    {team.creator.isMe &&\n                        <Col md={6} className=\"mx-auto mt-5 p-3 bg-light\">\n                            <h5 className=\"m-3\">Weitere Mitglieder hinzufügen</h5>\n                            <UserSelect value={null} className=\"\" placeholder=\"Mitglied hinzufügen...\" onChange={(v) => addMember(team.id, v.value)}/>\n                            <h5 className=\"m-3\">Modus ändern</h5>\n            \n                            <ButtonGroup className=\"align-middle\" size=\"sm\">\n                                <Button onClick={(e) => {setMode(team.id, \"TRAIN\")}} variant={ team.mode == \"TRAIN\" ? \"secondary\" : \"outline-secondary\"}>\n                                    <i className=\"fas fa-smile\"> </i><span> </span>\n                                    Training\n                                </Button>\n                                <Button onClick={(e) => {setMode(team.id, \"COMPETITION\")}} variant={ team.mode == \"COMPETITION\" ? \"secondary\" : \"outline-secondary\"}>\n                                    <i className=\"fas fa-crown\"></i><span> </span>\n                                    Wettkampf\n                                </Button>\n                            </ButtonGroup>\n\n                        </Col>\n                    }\n                    \n                    { team.creator.isMe && team.membershipSet.edges.length > 1 ?\n                        <p className=\"text-muted mt-5\"><i className=\"fas fa-info-circle\"></i> Um das Team verlassen zu können, entferne bitte zuerst alle anderen Mitglieder.</p>\n                        :\n                        <Button onClick={(e) => { removeMember(team.id) }} variant=\"danger\" className=\"mt-5\">\n                            <i className=\"fas fa-sign-out-alt\"></i> Team verlassen\n                        </Button>\n                    }\n\n                    \n                </Container>\n            </Col>\n            <CutImage src={SeascapeImg}/>\n        </Row>\n        </>\n    )\n}","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport UserBadge from \"./UserBadge\";\n\n\nexport default function QuestionCard({question, number, total, showAnswer} : {question, number : number, total : number, showAnswer? : boolean}) {\n    return (\n        <Card className=\"my-3\" bg=\"light\">\n            <Card.Body>\n                <Card.Title>Frage {number} von {total}</Card.Title>\n                {question.question}\n                { showAnswer && \n                    <Card className=\"mt-3\">\n                        <Card.Body>\n                            {question.modelAnswer}\n                        </Card.Body>\n                    </Card>\n                }\n            </Card.Body>\n            <Card.Footer>\n                <UserBadge user={question.author}/>\n            </Card.Footer>\n        </Card>\n    )\n}","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Avatar from \"react-avatar\";\nimport { QuizRenderer_team } from \"./__generated__/QuizRenderer_team.graphql\";\nimport UserBadge from \"./UserBadge\";\nimport QuestionCard from \"./QuestionCard\";\nimport { scoreAnswer, nextPhase } from \"../lib/quiz\";\nimport { ScoreEnum } from \"../lib/__generated__/quizScoreAnswerMutation.graphql\";\nimport CutImage from \"../CutImage\";\nimport ScoringImg from \"../scoring.jpg\";\n\nexport default function ScoringPhase({team} : {team: QuizRenderer_team}) {\n\n    const scoreClassMap = {\n        \"A_1\": \"border-warning\",\n        \"A_3\": \"border-success\",\n        \"A_0\": \"border-danger\",\n    }\n\n    const isModerator = team.currentQuestion.author.isMe;\n\n    const allScored = () => {\n        const scored = team.currentQuestion.answerSet.edges.filter((edge) => edge.node.score !== null);\n        return scored.length === team.currentQuestion.answerSet.edges.length;\n    }\n\n    return (\n        <>\n            <div className=\"pt-3 px-3\">\n                <h2 className=\"text-center\">Bewertungsphase</h2>\n                <hr className=\"mb-0\"/>\n            </div>\n            <Row noGutters className=\"align-items-start flex-grow-1 h-100\">\n                <Col md={6} className=\"p-3 mx-auto\">\n                    {team.currentQuestion && \n                        <>\n                            <QuestionCard question={team.currentQuestion} number={team.questionNumber} total={team.questionCount} showAnswer/>\n                        </>    \n                    }\n\n                    {team.currentQuestion.answerSet.edges.map((edge) => \n                        <Card key={edge.node.id} className={\"my-3 \"+scoreClassMap[edge.node.score]}>\n                            <Card.Body>\n                                <Card.Text>\n                                    {edge.node.answer}\n                                </Card.Text>\n\n                            </Card.Body>\n                            <Card.Footer className=\"text-right\">\n                                <Row>\n                                <Col className=\"text-left\">\n                                    <UserBadge user={edge.node.author}/>\n                                </Col>\n                                <Col>\n                                <ButtonGroup>\n                                    <Button disabled={!isModerator} onClick={(e) => scoreAnswer(edge.node.id, \"RIGHT\")} \n                                        variant={ edge.node.score == \"A_3\" ? \"success\" : \"outline-success\"} \n                                        size=\"sm\"><i className=\"fas fa-check-double\"></i> richtig\n                                    </Button><span> </span>\n\n                                    <Button disabled={!isModerator} onClick={(e) => scoreAnswer(edge.node.id, \"PARTIAL\")} \n                                        variant={ edge.node.score == \"A_1\" ? \"warning\" : \"outline-warning\"} \n                                        size=\"sm\"><i className=\"fas fa-check\"></i> tlw. richtig\n                                    </Button><span> </span>\n\n                                    <Button disabled={!isModerator} onClick={(e) => scoreAnswer(edge.node.id, \"WRONG\")} \n                                        variant={ edge.node.score == \"A_0\" ? \"danger\" : \"outline-danger\"} \n                                        size=\"sm\"><i className=\"fas fa-times\"></i> falsch\n                                    </Button><span> </span>\n                                </ButtonGroup> \n                                </Col>\n                                </Row>\n                            </Card.Footer>\n                        </Card>\n                        )}\n                        { isModerator &&\n                            <Button disabled={!allScored()} onClick={(e) => nextPhase(team.id)} variant=\"primary\">\n                                <i className=\"fas fa-check\"></i> Bewertungphase abschließen\n                            </Button>\n                        }\n                    </Col>\n                    <CutImage src={ScoringImg}/>\n                    </Row>\n        </>\n    )\n}","\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport CutImage from \"../CutImage\";\n\nexport default function WaitScreen({phase, title, message, image}) {\n    return (\n        <>\n        <div className=\"pt-3 px-3\">\n            <h2 className=\"text-center\">{phase}</h2>\n            <hr className=\"mb-0\"/>\n        </div>\n        <Row noGutters className=\"align-items-center flex-grow-1 h-100\">\n            <Col md={6} className=\"text-center\">\n                <Container className=\"p-5\">\n                    <h4 className=\"m-3\">{title}</h4>\n                    <p className=\"lead m-3\">\n                        {message} \n                    </p>\n                    <i className=\"fas fa-spin fa-spinner fa-3x text-muted\"></i>\n                </Container>\n            </Col>\n            <CutImage src={image}/>\n        </Row>\n        </>\n    )\n}","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Avatar from \"react-avatar\";\nimport {Formik, Form as FormikForm, Field} from \"formik\";\nimport Form from \"react-bootstrap/Form\";\nimport * as Yup from 'yup';\nimport { QuizRenderer_team } from \"./__generated__/QuizRenderer_team.graphql\";\nimport { postQuestion } from \"../lib/quiz\";\nimport Container from \"react-bootstrap/Container\";\nimport CutImage from \"../CutImage\";\nimport WaitImg from \"../wait1.jpg\";\nimport WaitScreen from \"./WaitScreen\";\nimport QuestionImage from \"../question.jpg\";\n\nconst questionSchema = Yup.object().shape({\n    question: Yup.string().required(\"Pflichtfeld\"),\n    modelAnswer: Yup.string().required(\"Pflichtfeld\")\n})\n\nexport default function QuestionPhase({team} : {team: QuizRenderer_team}) {\n    if(team.userDone)\n        return <WaitScreen \n            phase=\"Erarbeitungsphase\" \n            title=\"Vielen Dank für deine Frage.\" \n            message=\"Die anderen Mitspieler brauchen noch einen kleinen Moment.\"\n            image={WaitImg}/>\n    else\n        return (\n            <>\n            <div className=\"pt-3 px-3\">\n            <h2 className=\"text-center\">Erarbeitungsphase</h2>\n            <hr className=\"mb-0\"/>\n        </div>\n        <Row noGutters className=\"align-items-start flex-grow-1 h-100\">\n            <Col md={6} className=\"p-3 mx-auto\">\n            <Alert variant=\"info\">\n                <i className=\"fas fa-info-circle\"></i> In dieser Phase erarbeitest du eine Quizfrage, die du später deinen Mitspielern stellen darfst.\n                Benutze als Hilfsmittel die vereinbarten Lernmaterialien oder die Knowledge Base.\n            </Alert>\n            <Formik\n                initialValues={{\n                    question: \"\",\n                    modelAnswer: \"\"\n                }}\n                onSubmit={(values, actions) => {\n                    postQuestion(team.id, values.question, values.modelAnswer)\n                }}\n            >\n                {({values, errors, handleSubmit, isSubmitting}) => (\n                    <FormikForm>\n                        <Card>\n                            <Card.Body>\n                                <Card.Title>Deine Frage</Card.Title>\n                                <Form.Group>\n                                    <Form.Label>Thema</Form.Label>\n                                    <Form.Control readOnly value={team.topic.code + \" \" + team.topic.name}/>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>Frage</Form.Label>\n                                    <Form.Control readOnly={team.userDone} name=\"question\" as={Field} component=\"textarea\" rows={5}/>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Label>Musterantwort</Form.Label>\n                                    <Form.Control readOnly={team.userDone} name=\"modelAnswer\" as={Field} component=\"textarea\" rows={5}/>\n                                </Form.Group>\n                            </Card.Body>\n                            <Card.Footer>\n                                <Button disabled={isSubmitting} type=\"submit\"><i className=\"fas fa-paper-plane\"></i> Frage speichern</Button>\n                            </Card.Footer>\n\n                        </Card>\n                    </FormikForm>\n\n                    )}\n            </Formik>\n            </Col>\n            <CutImage src={QuestionImage}/>\n        </Row>\n   \n            </>\n        )\n}","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Avatar from \"react-avatar\";\nimport {Formik, Form as FormikForm, Field} from \"formik\";\nimport Form from \"react-bootstrap/Form\";\nimport * as Yup from 'yup';\nimport AnswerCard from \"./AnswerCard\";\nimport QuestionCard from \"./QuestionCard\";\nimport { QuizRenderer_team } from \"./__generated__/QuizRenderer_team.graphql\";\nimport { postAnswer } from \"../lib/quiz\";\nimport WaitScreen from \"./WaitScreen\";\nimport AnswerImg from \"../answer.jpg\";\nimport WaitImg from \"../wait2.jpg\";\nimport CutImage from \"../CutImage\";\n\nconst answerSchema = Yup.object().shape({\n    answer: Yup.string().required(\"Pflichtfeld\"),\n})\n\nexport default function AnswerPhase({team} : {team: QuizRenderer_team}) {\n    if(team.userDone)\n    {\n        let title = \"Vielen Dank für deine Antwort.\";\n        let message = \"Die anderen Mitspieler sind sicher auch gleich fertig.\";\n\n        if(team.currentQuestion.author.isMe)\n        {\n            title = \"Bitte einen Moment Geduld.\";\n            message = \"Die anderen Spieler beantworten gerade deine Frage.\";\n        }\n\n        return <WaitScreen \n            phase=\"Fragephase\" \n            title={title}\n            message={message}\n            image={WaitImg}/>\n    }\n    else\n        return (\n        <>\n            <div className=\"pt-3 px-3\">\n                <h2 className=\"text-center\">Fragephase</h2>\n                <hr className=\"mb-0\"/>\n            </div>\n            <Row noGutters className=\"align-items-start flex-grow-1 h-100\">\n                <Col md={6} className=\"p-3 mx-auto\">\n\n                <Alert variant=\"info\">\n                    <i className=\"fas fa-info-circle\"></i> In dieser Phase beantwortest du die Fragen der anderen Mitspieler.\n                </Alert>\n                {team.currentQuestion && <QuestionCard question={team.currentQuestion} number={team.questionNumber} total={team.questionCount}/> }\n                <Formik\n                    initialValues={{\n                        answer: \"\"\n                    }}\n                    validationSchema={answerSchema}\n                    onSubmit={(values, actions) => {\n                        postAnswer(team.id, values.answer)\n                    }}\n                >\n                    {({values, errors, handleSubmit, isSubmitting}) => (\n                        <FormikForm>\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>Deine Antwort</Card.Title>\n                                        <Form.Control name=\"answer\" as={Field} component=\"textarea\" rows={5}/>\n                                </Card.Body>\n                                <Card.Footer>\n                                    <Button type=\"submit\" disabled={isSubmitting}><i className=\"fas fa-paper-plane\"></i> Antwort senden</Button>\n                                </Card.Footer>\n\n                            </Card>\n                        </FormikForm>\n\n                        )}\n                </Formik>\n                </Col>\n                <CutImage src={AnswerImg}/>\n            </Row>\n        </>\n    )\n}","import React, { useEffect } from \"react\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { createFragmentContainer, requestSubscription } from \"react-relay\";\n\nimport { QuizRenderer_team } from \"./__generated__/QuizRenderer_team.graphql\";\nimport OpenPhase from \"./OpenPhase\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Avatar from 'react-avatar';\nimport Badge from \"react-bootstrap/Badge\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Form from \"react-bootstrap/Form\";\nimport ScoringPhase from \"./ScoringPhase\";\nimport QuestionPhase from \"./QuestionPhase\";\nimport AnswerPhase from \"./AnswerPhase\";\nimport environment from \"../lib/relayEnv\";\nimport UserSelect from \"./UserSelect\";\nimport { addMember, removeMember } from \"../lib/quiz\";\nimport { useHistory } from \"react-router-dom\";\nimport { QuizRendererSubscription } from \"./__generated__/QuizRendererSubscription.graphql\";\n\nfunction QuizRenderer({team} : {team: QuizRenderer_team}) {\n    const history = useHistory();\n\n    useEffect(()=> {\n        return requestSubscription<QuizRendererSubscription>(\n            environment,\n            {\n                subscription: graphql`\n                    subscription QuizRendererSubscription(\n                        $teamID: ID!\n                    ) {\n                        teamUpdated(id: $teamID) {\n                            ...QuizRenderer_team\n                        }\n                    }\n                `,\n                variables: {\n                    teamID: team.id\n                },\n                onNext: (response) => {\n                    if(response.teamUpdated === null)\n                        history.push(\"/teams\")\n                }\n            }\n        ).dispose;\n    }, [team.id])\n\n    return (\n        <Row noGutters className=\"h-100\">\n            <Col xl={2} lg={3} className=\"bg-light2 p-3\">\n                <h3>{team.name}</h3>\n                <div><strong>{team.topic.code} {team.topic.name}</strong></div>\n\n                { team.membershipSet.edges.map((edge) => \n                <div key={edge.node.id}>\n                <hr/>\n                <Row>\n                    <Col xs=\"auto\" style={{width: \"3.2em\"}}>\n                        <Avatar size=\"2.5em\" name={edge.node.user.firstName + \" \" + edge.node.user.lastName} round/>\n                    </Col>\n                    <Col>\n                        <h6>{edge.node.user.firstName} {edge.node.user.lastName}<span> </span>\n                        { (edge.node.user.id == team.creator.id) && <><i className=\"fas fa-shield-alt\"></i><span> </span></>} \n                        { false && <i className=\"fas fa-crown\"></i>}\n                        { team.creator.isMe && !edge.node.user.isMe && ((team.state == \"OPEN\") || (team.state == \"DONE\")) &&\n                            <Button onClick={(e) => {removeMember(team.id, edge.node.user.username)}} className=\"float-right\" size=\"sm\" variant=\"light\"\n                                title={`${edge.node.user.firstName} ${edge.node.user.lastName} entfernen`} href=\"\">\n                                <i className=\"fas fa-times text-danger\"></i>\n                            </Button>}\n\n                        <br/><small className=\"text-muted\">@{edge.node.user.username}</small></h6>\n\n                        { ((team.mode == \"COMPETITION\") || (edge.node.user.isMe)) &&\n                            <div className=\"text-muted\">\n                                <Badge variant=\"success\" pill><i className=\"fas fa-fw fa-check-double\"></i> {edge.node.right}</Badge><span> </span>\n                                <Badge variant=\"warning\" pill><i className=\"fas fa-fw fa-check\"></i> {edge.node.partial}</Badge><span> </span>\n                                <Badge variant=\"danger\" pill><i className=\"fas fa-fw fa-times\"></i> {edge.node.wrong}</Badge><span> </span>\n                                <Badge variant=\"dark\" pill><i className=\"fas fa-fw fa-star\"></i> {edge.node.score}</Badge>\n                            </div>\n                        }\n                    </Col>\n                </Row>\n                </div>\n                )}\n\n            </Col>\n\n            <Col xl={10} lg={9} className=\"h-100 d-flex flex-column\">\n                {\n                    (team.state == \"OPEN\" || team.state == \"DONE\") && <OpenPhase team={team}/>\n                }\n                {\n                    (team.state == \"QUESTION\") && <QuestionPhase team={team}/>\n                }\n                {\n                    (team.state == \"ANSWER\") && <AnswerPhase team={team}/>\n                }\n                {\n                    (team.state == \"SCORING\") && <ScoringPhase team={team}/>\n                }\n            </Col>\n        </Row>\n    )\n}\nexport default createFragmentContainer(\n    QuizRenderer,\n    {\n        team: graphql`\n        fragment QuizRenderer_team on TeamNode {\n            id\n            creator {\n                id\n                username\n                firstName\n                lastName\n                isMe\n            }\n            createdAt\n            name\n            topic {\n                id\n                code\n                name\n            }\n            mode\n            state\n            userDone\n            currentQuestion {\n                id\n                question\n                modelAnswer\n                author {\n                    username\n                    ...UserBadge_user\n                    isMe\n                }\n                answerSet {\n                    edges {\n                        node {\n                            id\n                            answer\n                            score\n                            author {\n                                username\n                                lastName\n                                firstName\n                                isMe\n                                ...UserBadge_user\n                            }\n                        }\n                    }\n                }\n            }\n            questionCount\n            questionNumber\n            membershipSet {\n                edges {\n                    node {\n                        id\n                        user {\n                            id\n                            username\n                            lastName\n                            firstName\n                            isMe\n                        }\n                        right\n                        wrong\n                        partial\n                        score\n                    }\n                }\n            }\n        }\n        `\n    }\n)","import React from \"react\";\nimport { QueryRenderer } from \"react-relay\";\nimport { useParams, Link, Redirect } from \"react-router-dom\";\nimport { PlayPageQuery } from \"./__generated__/PlayPageQuery.graphql\"; \nimport environment from \"../lib/relayEnv\";\nimport graphql from 'babel-plugin-relay/macro';\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport moment from \"moment\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport QuizRenderer from \"../components/QuizRenderer\";\n\n\nexport default function PlayPage() {\n    let {id} = useParams();\n\n    return (\n        <>\n            <QueryRenderer<PlayPageQuery>\n                environment={environment}\n                query={graphql`\n                    query PlayPageQuery($id: ID!) {\n                        team(id: $id) {\n                            ...QuizRenderer_team\n                        }\n                    }\n                `}\n                variables={{\n                    id: id,\n                }}\n                render={({error, props}) => {\n                    if(error)\n                    {\n                        return <Redirect to=\"/teams\"/>;\n                    }\n                    if(props) {\n                        return (\n                            <QuizRenderer team={props.team}/>\n                        )\n                    }\n                }}\n\n            />\n        </>\n    )\n}","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Helmet} from \"react-helmet\";\nimport QuizImage from \"../quizbg.jpg\";\nimport TeamImage from \"../team.jpg\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from \"react-bootstrap/Image\"\nimport IubhLogo from \"../iubh.png\";\n\nexport default function HomePage() {\n    return (\n        <>\n            <Image src={TeamImage} fluid className=\"border-bottom-fat\"/>\n            <Container className=\"text-center my-3\">\n                    <h1 className=\"my-2\">Fragen. Antworten. Teilen.</h1>\n\n                    <p className=\"lead my-3\">\n                        <strong>Q-Teams</strong> ist das neue kollaborative Quiz für Studierende. <br/>Lerne gemeinsam im Team und meistere deine nächste Prüfung mit links!\n                        <br/>\n                        Schau dir unser Video an und leg direkt los!\n\n                    </p>\n                    <div className=\"m-5\">\n                        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D4W9eQEv9WM\" \n                            frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                            allowFullScreen></iframe>\n                    </div>\n            </Container>\n            <Container className=\"bg-dark text-light text-center p-5 border-top-fat\" fluid>\n                <div>\n                    Ein Studienprojekt im Kurs ISEF Projekt Software-Engineering.\n                </div>\n                <Image className=\"col-md-4\" src={IubhLogo}/>\n                <div className=\"lead\">Made with <i className=\"fas fa-heart\"></i> by Daniel, Holger, Jörg and Max.</div>\n                <div className=\"mt-5\">\n                    &copy; 2020 Q-Teams\n                </div>\n            </Container>\n        </>\n    )\n}","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport LoginImg from \"../login.jpg\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Image from \"react-bootstrap/Image\";\n//import Auth from \"./Auth\";\nimport {Link} from \"react-router-dom\";\nimport CutImage from \"../CutImage\";\nimport graphql from 'babel-plugin-relay/macro';\nimport environment from \"../lib/relayEnv\";\n\nimport { commitMutation } from \"react-relay\";\n\n\nexport default class LoginPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            username: \"\",\n            rememberMe: true\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        this.setState({errors: null});\n        commitMutation(\n            environment,\n            {\n                mutation: graphql`\n                    mutation LoginPageMutation(\n                        $username: String!,\n                        $password: String!\n                    ) {\n                        tokenAuth(input: {\n                            username: $username,\n                            password: $password,\n                        }) {\n                            token\n                        }\n                    }\n                `,\n                variables: {\n                    username: this.state.username,\n                    password: this.state.password\n                },\n                onError: (error) => console.log(error),\n                onCompleted: (response, errors) => {\n                    console.log(response, errors)\n                    if(response.tokenAuth == null)\n                    {\n                        this.setState({errors: [\"Benutzername und/oder Kennwort falsch. Bitte achte auf Groß- und Kleinschreibung.\"]})\n                        localStorage.setItem(\"jwt\", null);\n                        this.props.setAuth(false);\n                    }\n                    else\n                    {\n                        localStorage.setItem(\"jwt\", response.tokenAuth.token);\n                        this.props.setAuth(true);\n                        this.loginRedirect();\n                    }\n                }\n            }\n        )\n\n    }\n\n    async loginRedirect() {\n        this.props.history.push(\"/teams\");\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        const value = event.target.value;\n        const newState = {};\n        newState[name] = value;\n        this.setState(newState);\n    }\n    componentDidMount() {\n        this.usernameInput.focus();\n    }\n    render() {\n        let errors = null;\n        if(this.state.errors)\n        {\n            errors = this.state.errors.map((e, idx) => (\n                <Alert key={idx} variant=\"danger\">{e}</Alert>\n            ))\n        }\n\n        return (\n            <>\n                    <Row noGutters className=\"flex-grow-1 align-items-center h-100\">\n                        <Col md={6}>\n                            <Container fluid className=\"my-3 text-center col-sm-9 col-lg-6\">\n                                <h1>Login</h1>\n                                <Form onSubmit={this.handleSubmit}>\n                                    {errors}\n                                    <Form.Group>\n                                        <Form.Label>Benutzername</Form.Label>\n                                        <Form.Control ref={input => this.usernameInput = input} name=\"username\" type=\"text\" required value={this.state.username} onChange={this.handleChange}/>\n                                    </Form.Group>\n                                    <Form.Group>\n                                        <Form.Label>Passwort</Form.Label>\n                                        <Form.Control type=\"password\" required name=\"password\" value={this.state.password} onChange={this.handleChange}/>\n                                    </Form.Group>\n\n                                    <div className=\"btn-group\">\n                                    <Button type=\"submit\"><i className=\"fa fa-sign-in-alt\"></i> Login</Button>\n                                    \n\n                                    </div>\n\n                                </Form>\n\n                            </Container>\n\n                        </Col>\n                        <CutImage src={LoginImg}/>\n                    </Row>\n            </>\n        );\n    }\n}","import React from \"react\";\nimport { Formik, Form as FormikForm } from \"formik\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport CutImage from \"../CutImage\";\nimport KBImage from \"../kb.jpg\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { QueryRenderer } from \"react-relay\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { KBPageQuery } from \"./__generated__/KBPageQuery.graphql\";\nimport environment from \"../lib/relayEnv\";\nimport { getTopics } from \"../lib/quiz\";\nimport AsyncSelect from 'react-select/async';\nimport { useHistory } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\n\nexport default function KBPage() {\n    const history = useHistory();\n\n    return (\n        <Row noGutters className=\"flex-grow-1 align-items-center h-100\">\n        <Col md={6} className=\"px-5\">\n            <h1>Knowledge Base</h1>\n            <p className=\"lead my-3\">\n                In der Knowledge Base findest du Fragen anderer Benutzer, die dir als Inspiration dienen können.\n                Starte mit einem Suchbegriff oder wähle einfach ein Thema.\n            </p>\n            <Form method=\"GET\" action=\"/kb/browse/\">\n            <InputGroup className=\"my-5\">\n                <Form.Control type=\"search\" placeholder=\"Suchbegriff eingeben...\" name=\"q\"/>\n                <InputGroup.Append>\n                    <Button type=\"submit\"><i className=\"fas fa-search\"></i> Suchen</Button>\n                </InputGroup.Append>\n            </InputGroup>\n            </Form>\n\n            <h2 className=\"my-3\">Nach Thema suchen</h2>\n            <AsyncSelect\n                placeholder=\"Thema wählen...\"\n                cacheOptions \n                loadOptions={getTopics} \n                noOptionsMessage={(v) => \"Bitte Suchbegriff eingeben...\"} \n                onChange={(value: any) => history.push(`/kb/${value.value}`)}\n                value={null}\n                                           \n            />\n            <h2 className=\"mt-5 mb-3\">Hot Topics</h2>\n            <QueryRenderer<KBPageQuery>\n                environment={environment}\n                query={graphql`\n                    query KBPageQuery {\n                        topics(first: 20, orderBy: \"-questionCount\") {\n                            edges {\n                                node {\n                                    id\n                                    name\n                                    code\n                                    questionCount\n                                }\n                            }\n                        }\n                    }\n                `}\n                variables={{}}\n                render={({error, props}) =>\n                <>\n                    {props && props.topics.edges.map((edge) =>\n                        <>\n                            <LinkContainer key={edge.node.id}  to={`/kb/browse/${edge.node.id}`}>\n                            <Button variant=\"outline-secondary\" size=\"sm\" className=\"m-1\">\n                                {edge.node.code} {edge.node.name} <Badge variant=\"secondary\" pill>{edge.node.questionCount}</Badge>\n                            </Button>\n                            </LinkContainer>\n                        </>\n                    )}\n                </>\n            }/>\n\n        </Col>\n        <CutImage src={KBImage}/>\n    </Row>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { Formik, Form as FormikForm } from \"formik\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport CutImage from \"../CutImage\";\nimport KBImage from \"../kb.jpg\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { QueryRenderer, fetchQuery } from \"react-relay\";\nimport graphql from 'babel-plugin-relay/macro';\nimport { KBBrowsePageQuery } from \"./__generated__/KBBrowsePageQuery.graphql\";\nimport { KBBrowsePageTopicQuery } from \"./__generated__/KBBrowsePageTopicQuery.graphql\";\n\nimport environment from \"../lib/relayEnv\";\nimport { getTopics } from \"../lib/quiz\";\nimport AsyncSelect from 'react-select/async';\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport UserBadge from \"../components/UserBadge\";\nimport qs from \"qs\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\n\nexport default function KBBrowsePage() {\n    const history = useHistory();\n    const location = useLocation();\n    let { topicID } = useParams();\n\n    const params = qs.parse(location.search.slice(1));\n    const query = params.q as string;\n    const own = params.own == \"true\"\n    const [topic, setTopic] = useState<any>();\n\n\n    useEffect(()=> {\n        async function fetchTopic() {\n            const response = await fetchQuery<KBBrowsePageTopicQuery>(\n                environment,\n                graphql`\n                    query KBBrowsePageTopicQuery(\n                        $topicID: ID!\n                    ) {\n                        topic(id: $topicID) {\n                            name\n                            code\n                        }\n                    }\n                `,\n                {topicID},\n            );\n            setTopic({label: `${response.topic.code} ${response.topic.name}`});\n        }\n        if(topicID)\n            fetchTopic();\n        else\n            setTopic(null);\n    }, [topicID])\n\n    const querystring = {\n        q: query,\n        own: own\n    }\n    function search() {\n        history.push(`/kb/browse/${topicID ? topicID+\"/\" : \"\"}?${qs.stringify(querystring)}`)\n    }\n\n    return (\n        <Container className=\"px-5\">\n            <Row>\n                <Col md={4}>\n                    <Form.Control className=\"mt-5\" type=\"search\" placeholder=\"Suchbegriff eingeben...\" name=\"q\" value={query} \n                        onChange={(e) => { querystring.q = e.target.value; search() }}/>\n                </Col>\n                <Col md={4}>\n                    <AsyncSelect\n                        className=\"my-5\"\n                        placeholder=\"Thema wählen...\"\n                        cacheOptions \n                        loadOptions={getTopics} \n                        noOptionsMessage={(v) => \"Bitte Suchbegriff eingeben...\"} \n                        onChange={(value: any) => {topicID = value?.value; search()}}\n                        value={topic}\n                        isClearable\n                                                \n                    />\n                </Col>\n                <Col md={4}>\n                    <ButtonGroup className=\"my-5 w-100\">\n                        <Button onClick={() => { querystring.own = false; search()}} variant={ own ? \"outline-primary\" : \"primary\"}><i className=\"fas fa-user-friends\"></i> Alle Fragen</Button>\n                        <Button onClick={() => { querystring.own = true; search()}} variant={ !own ? \"outline-primary\" : \"primary\"}><i className=\"fas fa-user\"></i> Meine Fragen</Button>\n                    </ButtonGroup>\n                </Col>\n            </Row>\n            <QueryRenderer<KBBrowsePageQuery>\n                environment={environment}\n                query={graphql`\n                    query KBBrowsePageQuery(\n                        $topicID: ID\n                        $query: String\n                        $own: Boolean\n                    ) {\n                        questions(topic: $topicID, query: $query, own: $own) {\n                            edges {\n                                node {\n                                    id\n                                    question\n                                    modelAnswer\n                                    author {\n                                        ...UserBadge_user\n                                        email\n                                        isMe\n                                    }\n                                    topic {\n                                        name\n                                        code\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `}\n                variables={{topicID, query, own}}\n                render={({error, props}) =>\n                <>\n                    {props && props.questions.edges.map((edge) =>\n                            <Card key={edge.node.id} className=\"my-3\">\n                                <Card.Body>\n                                    <Card.Title>\n                                    {edge.node.question}\n                                    <div className=\"text-muted\">\n                                        <small>{edge.node.topic.code} {edge.node.topic.name}</small>\n                                    </div>\n                                    </Card.Title>\n                                    {edge.node.modelAnswer}\n                                </Card.Body>\n                                <Card.Footer>\n                                    <Row>\n                                        <Col>\n                                        <UserBadge user={edge.node.author}/>\n                                        </Col>\n                                        <Col className=\"text-right\">\n                                                <ButtonGroup size=\"sm\">\n                                                <Button variant=\"outline-primary\" as=\"a\" title=\"E-Mail an Autor\" href={`mailto:${edge.node.author.email}`}>\n                                                    <i className=\"fas fa-envelope\"></i>\n                                                </Button>\n                                                <span> </span>\n\n                                                {edge.node.author.isMe && \n                                                    <>\n                                                        <LinkContainer to={`/kb/edit/${edge.node.id}/?backTo=${location.pathname}`}>\n                                                            <Button variant=\"outline-primary\" title=\"Frage bearbeiten\" href=\"\"><i className=\"fas fa-pencil-alt\"></i></Button>\n                                                        </LinkContainer>\n                                                        <span> </span>\n\n                                                        <LinkContainer to={`/kb/delete/${edge.node.id}/?backTo=${location.pathname}`}>\n                                                            <Button className=\"text-danger\" variant=\"outline-primary\" title=\"Frage löschen\" href=\"\"><i className=\"fas fa-trash\"></i></Button>\n                                                        </LinkContainer>\n                                                        <span> </span>\n                                                    </>\n                                                }\n\n                                            </ButtonGroup>\n                                        </Col>\n                                    </Row>\n                                </Card.Footer>\n                            </Card>\n                    )}\n                </>\n            }/>\n\n        </Container>\n\n    )\n}","import React from \"react\";\nimport { Formik, Form as FormikForm, Field } from \"formik\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport CutImage from \"../CutImage\";\nimport EditImage from \"../edit.jpg\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { QueryRenderer } from \"react-relay\";\nimport graphql from 'babel-plugin-relay/macro';\nimport environment from \"../lib/relayEnv\";\nimport { getTopics, updateQuestion } from \"../lib/quiz\";\nimport AsyncSelect from 'react-select/async';\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { QuestionEditPageQuery } from \"./__generated__/QuestionEditPageQuery.graphql\";\nimport qs from \"qs\";\n\nexport default function QuestionEditPage() {\n    const history = useHistory();\n    const {questionID} = useParams();\n    const location = useLocation();\n\n    let { backTo } : {backTo? : string }= qs.parse(location.search.slice(1));\n\n    if(!backTo)\n        backTo = \"/kb/browse/\";\n\n    return (\n        <Row noGutters className=\"flex-grow-1 align-items-center h-100\">\n        <Col md={6} className=\"px-5\">\n            <h1 className=\"mb-3\">Frage bearbeiten</h1>\n            <QueryRenderer<QuestionEditPageQuery>\n                environment={environment}\n                query={graphql`\n                    query QuestionEditPageQuery(\n                        $questionID: ID!\n                    ) {\n                        question(id: $questionID) {\n                            id\n                            question\n                            modelAnswer\n                            topic {\n                                name\n                                code\n                            }\n                        }\n                    }\n                `}\n                variables={{questionID}}\n                render={({error, props}) => {\n                    if(error)\n                        return <h1>Error</h1>\n                    if(props)\n                        return <>\n                            <Formik\n                                initialValues={{ question: props.question.question, modelAnswer: props.question.modelAnswer}}\n                                onSubmit={(values, actions) => {\n                                    updateQuestion(questionID, values.question, values.modelAnswer, () => history.push(backTo));\n\n                                }}\n                            >\n                                { ({isSubmitting, values}) =>\n                                    <>\n                                        <FormikForm>\n                                            <Form.Group>\n                                                <Form.Label>Thema</Form.Label>\n                                                <Form.Control disabled value={props.question.topic.code + \" \" + props.question.topic.name}/>\n                                            </Form.Group>\n                                            <Form.Group>\n                                                <Form.Label>Frage</Form.Label>\n                                                <Form.Control name=\"question\" as={Field} component=\"textarea\" rows={5}/>\n                                            </Form.Group>\n                                            <Form.Group>\n                                                <Form.Label>Musterantwort</Form.Label>\n                                                <Form.Control name=\"modelAnswer\" as={Field} component=\"textarea\" rows={5}/>\n                                            </Form.Group>\n                                            <ButtonGroup>\n                                                <Button disabled={isSubmitting} type=\"submit\"><i className=\"fas fa-save\"></i> Speichern</Button>\n                                                <LinkContainer to={backTo}>\n                                                    <Button variant=\"secondary\"><i className=\"fas fa-times\"></i> Abbrechen</Button>\n                                                </LinkContainer>\n                                            </ButtonGroup>\n                                        </FormikForm>\n                                    </>\n                                }\n                            </Formik>\n                        </>\n                }\n            }/>\n\n        </Col>\n        <CutImage src={EditImage}/>\n    </Row>\n    )\n}","import React from \"react\";\nimport { Formik, Form as FormikForm, Field } from \"formik\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport CutImage from \"../CutImage\";\nimport DeleteImage from \"../delete.jpg\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { QueryRenderer } from \"react-relay\";\nimport graphql from 'babel-plugin-relay/macro';\nimport environment from \"../lib/relayEnv\";\nimport { getTopics, updateQuestion, removeQuestion } from \"../lib/quiz\";\nimport AsyncSelect from 'react-select/async';\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { QuestionEditPageQuery } from \"./__generated__/QuestionEditPageQuery.graphql\";\nimport qs from \"qs\";\n\nexport default function QuestionDeletePage() {\n    const history = useHistory();\n    const {questionID} = useParams();\n    const location = useLocation();\n\n    let { backTo } : {backTo? : string }= qs.parse(location.search.slice(1));\n\n    if(!backTo)\n        backTo = \"/kb/browse/\";\n\n    return (\n        <Row noGutters className=\"flex-grow-1 align-items-center h-100\">\n        <Col md={6} className=\"px-5 text-center\">\n            <h1 className=\"mb-3\">Frage löschen</h1>\n            <p className=\"lead\">\n                Möchtest du die Frage wirklich unwiderruflich löschen?\n            </p>\n            <ButtonGroup className=\"mt-3\">\n                <Button onClick={(e) => { removeQuestion(questionID); history.push(backTo) }} variant=\"danger\"><i className=\"fas fa-trash\"></i> Löschen</Button>\n                <LinkContainer to={backTo}>\n                    <Button variant=\"secondary\"><i className=\"fas fa-times\"></i> Abbrechen</Button>\n                </LinkContainer>\n            </ButtonGroup>\n        </Col>\n        <CutImage src={DeleteImage}/>\n    </Row>\n    )\n}","import React, { useState } from 'react';\nimport Nav from './components/Nav';\nimport Container from \"react-bootstrap/Container\";\nimport TeamsPage from './pages/TeamsPage';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport PlayPage from './pages/PlayPage';\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport KBPage from './pages/KBPage';\nimport KBBrowsePage from \"./pages/KBBrowsePage\";\nimport QuestionEditPage from './pages/QuestionEditPage';\nimport QuestionDeletePage from './pages/QuestionDeletePage';\n\nfunction App() {\n  const [auth, setAuth] = useState(localStorage.getItem(\"jwt\") !== null);\n\n  return (\n    <>\n      <div className=\"d-flex flex-column flex-grow-1 h-100\">\n\n        <Router>\n        <Nav auth={auth} setAuth={setAuth}/>\n          <Switch>\n            <Route path=\"/teams/:id\" component={PlayPage}/>\n            <Route path=\"/teams\" component={TeamsPage}/>\n            <Route path=\"/login\" render={(props) => <LoginPage {...props} setAuth={setAuth} auth={auth}/>}/>\n            <Route path=\"/kb/browse/:topicID?\" component={KBBrowsePage}/>\n            <Route path=\"/kb/edit/:questionID\" component={QuestionEditPage}/>\n            <Route path=\"/kb/delete/:questionID\" component={QuestionDeletePage}/>\n\n            <Route path=\"/kb\" component={KBPage}/>\n            <Route path=\"/\" component={HomePage}/>\n            \n          </Switch>\n        </Router>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.scss';\nimport '@fortawesome/fontawesome-free/js/fontawesome'\nimport '@fortawesome/fontawesome-free/js/solid'\nimport '@fortawesome/fontawesome-free/js/regular'\nimport '@fortawesome/fontawesome-free/js/brands'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}